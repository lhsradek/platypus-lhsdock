
#
# === E - Elasticsearch ===
#
# https://www.elastic.co/guide/en/elasticsearch/reference/current/scalability.html
# https://stackoverflow.com/questions/15694724/shards-and-replicas-in-elasticsearch
#
  es01:
    depends_on:
      setup:
        condition: service_healthy
    # Ubuntu - elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-es01"
    hostname: "es01.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${ES_PORT}:9200
      - 9300:9300
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./extras/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./logs/es01:/usr/share/elasticsearch/logs
      - esdata01:/usr/share/elasticsearch
    environment:
      - node.name=es01
      - http.port=9200
      - transport.port=9300
      - discovery.seed_hosts=es02:9301
      # - discovery.seed_hosts=es02:9301,es03:9302
      - xpack.security.http.ssl.key=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.http.ssl.certificate=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.transport.ssl.key=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.transport.ssl.certificate=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.crt
      - CLUSTER_NAME=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=${ES01_JAVA_OPTS}
      - LICENSE=${LICENSE}
      - VERIFICATION_MODE=${VERIFICATION_MODE}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es01-public.rule=Host(`es01.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es01-public.entrypoints=https"
      - "traefik.http.routers.es01-public.tls=true"
      - "traefik.http.routers.es01-public.middlewares=es01-${APP_ID}@docker"
      - "traefik.http.middlewares.es01-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.es01-${APP_ID}.redirectscheme.port=9200"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.port=9200"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.scheme=https"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://es01.${APP_HOST}.${INT_NETWORK}:9200 | grep -q 'missing authentication credentials'" ]
      interval: 10s
      timeout: 10s
      retries: 500
  
  es02:
    depends_on:
      es01:
        condition: service_healthy
    # Ubuntu - elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-es02"
    hostname: "es02.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - 9201:9201
      - 9301:9301
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./extras/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./logs/es02:/usr/share/elasticsearch/logs
      - esdata02:/usr/share/elasticsearch
    environment:
      - node.name=es02
      - http.port=9201
      - transport.port=9301
      - discovery.seed_hosts=es01:9300
      # - discovery.seed_hosts=es01:9300,es03:9302
      - xpack.security.http.ssl.key=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.http.ssl.certificate=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.transport.ssl.key=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.transport.ssl.certificate=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.crt
      - CLUSTER_NAME=${CLUSTER_NAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=${ES02_JAVA_OPTS}
      - LICENSE=${LICENSE}
      - VERIFICATION_MODE=${VERIFICATION_MODE}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es02-public.rule=Host(`es02.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es02-public.entrypoints=https"
      - "traefik.http.routers.es02-public.tls=true"
      - "traefik.http.routers.es02-public.middlewares=es02-${APP_ID}@docker"
      - "traefik.http.middlewares.es02-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.es02-${APP_ID}.redirectscheme.port=9201"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.port=9201"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.scheme=https"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://es02.${APP_HOST}.${INT_NETWORK}:9201 | grep -q 'missing authentication credentials'" ]
      interval: 10s
      timeout: 10s
      retries: 500

#        
#   Start with two elasticsearch, the third can be easily added after installation. Three nodes are a robust solution.
#   Similar to how robust people tend to be slow, it takes a long time to restart three nodes and to go from red to green.
#
#   es03:
#     depends_on:
#       es02:
#         condition: service_healthy
#     # Ubuntu - elasticsearch
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-es03"
#     hostname: "es03.${APP_HOST}.${INT_NETWORK}"
#     networks:
#       # for traefik:
#       - default
#       # local network:
#       - intnet
#     ports:
#       - 9202:9202
#       - 9302:9302
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - ./extras/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
#       - ./certs:/usr/share/elasticsearch/config/certs
#       - ./logs/es03:/usr/share/elasticsearch/logs
#       - esdata03:/usr/share/elasticsearch
#     environment:
#       - node.name=es03
#       - http.port=9202
#       - transport.port=9302
#       - discovery.seed_hosts=es01:9300,es02:9301
#       - xpack.security.http.ssl.key=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.key
#       - xpack.security.http.ssl.certificate=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.crt
#       - xpack.security.transport.ssl.key=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.key
#       - xpack.security.transport.ssl.certificate=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.crt
#       - CLUSTER_NAME=${CLUSTER_NAME}
#       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#       - ES_JAVA_OPTS=${ES03_JAVA_OPTS}
#       - LICENSE=${LICENSE}
#       - VERIFICATION_MODE=${VERIFICATION_MODE}
#     # Traefik redirects the stray query directly to elastic. It is nice that the running service can be seen in traffic
#     labels:
#       - "traefik.enable=true"
#       - "traefik.docker.network=${DOCKER_NETWORK}"
#       - "traefik.http.routers.es03-public.rule=Host(`es03.${APP_HOST}.${INT_NETWORK}`)"
#       - "traefik.http.routers.es03-public.entrypoints=https"
#       - "traefik.http.routers.es03-public.tls=true"
#       - "traefik.http.routers.es03-public.middlewares=es03-${APP_ID}@docker"
#       - "traefik.http.middlewares.es03-${APP_ID}.redirectscheme.scheme=https"
#       - "traefik.http.middlewares.es03-${APP_ID}.redirectscheme.port=9202"
#       - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.port=9202"
#       - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.scheme=https"
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://es03.${APP_HOST}.${INT_NETWORK}:9202 | grep -q 'missing authentication credentials'" ]
#       interval: 10s
#       timeout: 10s
#       retries: 500
