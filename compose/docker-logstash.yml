
#
# === L - Logstash ===
#
  logstash:
    depends_on:
      es02:
        condition: service_healthy
    # Ubuntu - logstash 
    image: logstash:${STACK_VERSION}
    deploy:
      resources:
        limits:
          memory: ${MEM_LOGSTASH_LIMIT}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_HOST}-${APP_ID}-logstash"
    hostname: "logstash.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      default:
      # local network:
      intnet:
        aliases:
          - logstash.{APP_HOST}.${INT_NETWORK}
        ipv4_address: ${ES_NET}.5
    ports:
      # syslog access pipeline
      - 5000:5000/udp
      - 5000:5000/tcp
      # syslog error pipeline
      - 5001:5001/udp
      - 5001:5001/tcp
      # elastic-agent pipeline
      - ${LOGSTASH_PORT_5044}:5044
      # beat pipeline
      - ${LOGSTASH_PORT_5045}:5045
      # metrics
      # - ${LOGSTASH_MONITOR_PORT}:9600
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock
      - ./certs/ca/ca.crt:/usr/share/logstash/config/certs/ca.crt
      - ./certs/logstash.docker.nginx.local/logstash.docker.nginx.local.crt:/usr/share/logstash/config/certs/logstash.crt
      - ./certs/logstash.docker.nginx.local/logstash.pkcs8.key:/usr/share/logstash/config/certs/logstash.key
      # - ./extras/hosts/hosts:/etc/hosts
      - ./extras/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./extras/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./extras/logstash/syslog-access.conf:/usr/share/logstash/pipeline/syslog-access.conf
      - ./extras/logstash/syslog-error.conf:/usr/share/logstash/pipeline/syslog-error.conf
      - ./extras/logstash/elastic-agent.conf:/usr/share/logstash/pipeline/elastic-agent.conf
      - ./extras/logstash/beat.conf:/usr/share/logstash/pipeline/beat.conf
      - logstash:/usr/share/logstash
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - HOST_NICK=${HOST_NICK}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTIC_SSL_CERTIFICATEAUTHORITY=/usr/share/logstash/config/certs/ca.crt
      - ES1_PORT=${ES1_PORT}
      - ES2_PORT=${ES2_PORT}
      - ES3_PORT=${ES3_PORT}
      - LOGSTASH_USERNAME=${LOGSTASH_USERNAME}
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD}
      - LOGSTASH_KEYSTORE_PASS=${ENCRYPTION_KEYS}
      - LS_JAVA_OPTS=${LS_JAVA_OPTS}
      - VERIFICATION_MODE=${VERIFICATION_MODE}
      - STACK_VERSION=${STACK_VERSION}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - TRAEFIK_LOG=${TRAEFIK_LOG}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.logstash-public.rule=Host(`logstash.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.logstash-public.entrypoints=http-${LOGSTASH_MONITOR_PORT}"
      - "traefik.http.routers.logstash-public.tls=false"
      - "traefik.http.routers.logstash-public.service=logstash-${APP_ID}"
      - "traefik.http.services.logstash-${APP_ID}.loadbalancer.server.port=${LOGSTASH_MONITOR_PORT}"
      - "traefik.http.services.logstash-${APP_ID}.loadbalancer.server.scheme=http"
      #
      # - "traefik.tcp.routers.logstash-access.rule=HostSNI(`*`)"
      # - "traefik.tcp.routers.logstash-access.entrypoints=tcp-access"
      # - "traefik.tcp.routers.logstash-access.tls=false"
      # - "traefik.tcp.routers.logstash-access.tls.passthrough=false"
      # - "traefik.tcp.routers.logstash-access.service=logstash-${APP_ID}-tcp-access"
      # - "traefik.tcp.services.logstash-${APP_ID}-tcp-access.loadbalancer.server.port=5000"
      # - "traefik.udp.routers.logstash-access.entrypoints=udp-access"
      # - "traefik.udp.routers.logstash-access.service=logstash-${APP_ID}-udp-access"
      # - "traefik.udp.services.logstash-${APP_ID}-udp-access.loadbalancer.server.port=5000"
      #
      # - "traefik.tcp.routers.logstash-error.rule=HostSNI(`*`)"
      # - "traefik.tcp.routers.logstash-error.entrypoints=tcp-error"
      # - "traefik.tcp.routers.logstash-error.tls=false"
      # - "traefik.tcp.routers.logstash-error.tls.passthrough=false"
      # - "traefik.tcp.routers.logstash-error.service=logstash-${APP_ID}-tcp-error"
      # - "traefik.tcp.services.logstash-${APP_ID}-tcp-error.loadbalancer.server.port=5001"
      # - "traefik.udp.routers.logstash-error.entrypoints=udp-error"
      # - "traefik.udp.routers.logstash-error.service=logstash-${APP_ID}-udp-error"
      # - "traefik.udp.services.logstash-${APP_ID}-udp-error.loadbalancer.server.port=5001"
      #
      # - "traefik.tcp.routers.logstash-elastic.rule=HostSNI(`logstash.${APP_HOST}.${INT_NETWORK}`)"
      # - "traefik.tcp.routers.logstash-elastic.entrypoints=tcp-elastic"
      # - "traefik.tcp.routers.logstash-elastic.tls=true"
      # - "traefik.tcp.routers.logstash-elastic.tls.passthrough=true"
      # - "traefik.tcp.routers.logstash-elastic.service=logstash-${APP_ID}-tcp-elastic"
      # - "traefik.tcp.services.logstash-${APP_ID}-tcp-elastic.loadbalancer.server.port=${LOGSTASH_PORT_5044}"
      #
      # - "traefik.tcp.routers.logstash-beat.rule=HostSNI(`logstash.${APP_HOST}.${INT_NETWORK}`)"
      # - "traefik.tcp.routers.logstash-beat.entrypoints=tcp-beat"
      # - "traefik.tcp.routers.logstash-beat.tls=true"
      # - "traefik.tcp.routers.logstash-beat.tls.passthrough=true"
      # - "traefik.tcp.routers.logstash-beat.service=logstash-${APP_ID}-tcp-beat"
      # - "traefik.tcp.services.logstash-${APP_ID}-tcp-beat.loadbalancer.server.port=${LOGSTASH_PORT_5045}"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:${LOGSTASH_MONITOR_PORT} | grep -q 'HTTP/1.1 200 OK'"]
      # test: ["CMD-SHELL", "bin/logstash -t | grep -q 'Config Validation Result: OK'"]
      interval: 10s
      timeout: 10s
      retries: 500
