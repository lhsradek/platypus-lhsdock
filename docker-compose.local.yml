version: '3.9'

networks:
  default:
    external: true
    name: ${DOCKER_NETWORK}
  intnet:
    external: false
    name: ${INT_NETWORK}

services:

  # Alpine Linux
  weblhs:
    # lhsradek/lhsdock has bash, openssl, perl and the program platypus.pl for certificates, which I don't use much anymore, because the Elastic Certificate Tool is used by webservice 'setup'.
    # build:
    #   context: ./context
    #   dockerfile: Dockerfile 
    # image: lhsradek/lhsdock:v3
    image: nginx:alpine
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}"
    hostname: "${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    # ports:
    # - 80:80
    # - 443:443
    volumes:
      # if http
      - ./extras/nginx/default-http.conf:/etc/nginx/conf.d/default.conf
      # else if https
      # - ./extras/nginx/default-https.conf:/etc/nginx/conf.d/default.conf
      # - ./certs/${CERTNAME}.crt:/etc/ssl/private/cacert.pem
      # - ./certs/${CERTNAME}.key:/etc/ssl/private/cacert-key.pem
      # fi
      - ./application/html:/var/www/html:ro
      - ./logs/nginx:/var/log/nginx
      - esdata01:/root/bin/volume/esdata01:ro
      - kibanadata:/root/bin/volume/kibana:ro
      - logstashdata:/root/bin/volume/logstash:ro
      - heartbeatdata:/root/bin/volume/heart:ro
      - metricbeatdata:/root/bin/volume/metric:ro
      - filebeatdata:/root/bin/volume/file:ro
      - epsdata:/root/bin/volume/eps:ro
      # It's for my prune volume deletion protection ;-)
      - wordpressbedrockdb:/root/bin/volume/bedrock-db:ro
      - wordpresswp99:/root/bin/volume/wordpress-wp-99:ro
      - wordpressdb99:/root/bin/volume/wordpress-db-99:ro
      - wordpresspma99:/root/bin/volume/wordpress-pma-99:ro
      - wordpressredis99:/root/bin/volume/wordpress-redis-99:ro
      - tomboladb:/root/bin/volume/tombola-db:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.weblhs-public.rule=Host(`${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.weblhs-public.entrypoints=https"
      - "traefik.http.routers.weblhs-public.tls=true"
      - "traefik.http.services.weblhs-platypus-${APP_ID}.loadbalancer.server.port=80"
      - "traefik.http.services.weblhs-platypus-${APP_ID}.loadbalancer.server.scheme=http"
      # if https
      # - "traefik.http.services.weblhs-platypus-${APP_ID}.loadbalancer.server.port=443"
      # - "traefik.http.services.weblhs-platypus-${APP_ID}.loadbalancer.server.scheme=https"

  weblhs-php:
    # Alpine Linux
    image: php:fpm-alpine
    # image: lhsradek/fpm:v1
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-php"
    hostname: "weblhs-php"
    networks:
      # local network:
      - intnet
    volumes:
      - ./application/html:/var/www/html:ro

  setup: # setup makes certs and change password
    # Ubuntu - elasticsearch
    # see https://www.elastic.co/guide/en/elasticsearch/reference/8.4/docker.html
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    # restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-setup"
    hostname: "setup"
    networks:
      # local network:
      - intnet
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          if [ ! -f config/certs/ca.zip ]; then
            bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          fi;
          unzip -n config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: apm\n"\
          "    dns:\n"\
          "      - apm\n"\
          "      - apm.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - es01.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - es02.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - es03.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: eps\n"\
          "    dns:\n"\
          "      - eps\n"\
          "      - eps.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: file\n"\
          "    dns:\n"\
          "      - file\n"\
          "      - file.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: fleet\n"\
          "    dns:\n"\
          "      - fleet\n"\
          "      - fleet.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: heart\n"\
          "    dns:\n"\
          "      - heart\n"\
          "      - heart.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - kibana.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: logstash\n"\
          "    dns:\n"\
          "      - logstash\n"\
          "      - logstash.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: metric\n"\
          "    dns:\n"\
          "      - metric\n"\
          "      - metric.${APP_HOST}.${INT_NETWORK}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: ${APP_HOST}\n"\
          "    dns:\n"\
          "      - ${APP_HOST}\n"\
          "      - ${APP_HOST}.${INT_NETWORK}\n"\
          "      - ${APP_HOST}.traefik.local\n"\
          "      - ${APP_HOST}.wordpress.local\n"\
          "      - wp.${APP_HOST}.wordpress.local\n"\
          "      - wpa.${APP_HOST}.wordpress.local\n"\
          "      - pma.${APP_HOST}.wordpress.local\n"\
          "      - ${APP_HOST}.tomcat.local\n"\
          "      - web.${APP_HOST}.tomcat.local\n"\
          "      - ad.${APP_HOST}.tomcat.local\n"\
          "      - ${APP_HOST}.intranet.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          > config/certs/instances.yml;
          if [ ! -f config/certs/certs.zip ]; then
            bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          fi;
          unzip -n config/certs/certs.zip -d config/certs;
        fi;
          echo "Setting file permissions"
        chown -R root:root config/certs;
        # find . -type d -exec chmod 750 \{\} \;;
        find . -type d -exec chmod 755 \{\} \;; # logstash
        find . -type f -exec chmod 640 \{\} \;;
        find . -type f -name ca.crt -exec chmod 644 \{\} \;; # logstash
        find . -type f -name logstash.crt -exec chmod 644 \{\} \;; # logstash
        find . -type f -name logstash.key -exec chmod 644 \{\} \;; # logstash
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting logstash_system password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/logstash_system/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting enterprise_search password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/enterprise_search/_password -d "{\"password\":\"${EPS_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting logstash_writer password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/logstash_writer/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting beats_system password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/beats_system/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting remote_monitoring_user password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/remote_monitoring_user/_password -d "{\"password\":\"${ELASTIC_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting apm_system password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/apm_system/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting fleet_server password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/fleet_server/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
#
# Tree for certs, *.pem (for traefik) created by:
# find . -name *.crt -exec bash -c 'openssl x509 -in {} -out ${1%.crt}.pem' - {} \;;
#
# ├── ca
# │   ├── ca.crt
# │   ├── ca.key
# │   └── ca.pem
# ├── apm (apm-server)
# │   ├── apm.crt
# │   ├── apm.key
# │   └── apm.pem
# ├── docker ({APP_HOST} - my www)
# │   ├── docker.crt
# │   ├── docker.key
# │   └── docker.pem
# ├── es01 (elasticsearch 01)
# │   ├── es01.crt
# │   ├── es01.key
# │   └── es01.pem
# ├── es02 (elasticsearch 02)
# │   ├── es02.crt
# │   ├── es02.key
# │   └── es02.pem
# ├── es03 (elasticsearch 03 - reserved)
# │   ├── es03.crt
# │   ├── es03.key
# │   └── es03.pem
# ├── eps
# │   ├── eps.crt
# │   ├── eps.key
# │   └── eps.pem
# ├── file
# │   ├── file.crt
# │   ├── file.key
# │   └── file.pem
# ├── fleet
# │   ├── fleet.crt
# │   ├── fleet.key
# │   └── fleet.pem
# ├── heart
# │   ├── heart.crt
# │   ├── fleet.key
# │   └── fleet.pem
# ├── kibana
# │   ├── kibana.crt
# │   ├── kibana.key
# │   └── kibana.pem
# ├── metric
# │   ├── metric.crt
# │   ├── metric.key
# │   └── metric.pem
# ├── logstash
# │   ├── logstash.crt
# │   ├── logstash.key
# │   └── logstash.pem
# ├── ca.zip
# ├── certs.zip
# └── instances.yml

  es01:
    # Ubuntu - elasticsearch
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    # restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-es01"
    hostname: "es01"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${ES_PORT}:9200
    #  - 9300:9300
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      # - ./logs/es01:/usr/share/elasticsearch/logs
      # - ./logs/es01:/var/log:rw
      - esdata01:/usr/share/elasticsearch
    environment:
      - node.name=es01
      - http.host=0.0.0.0
      # - node.roles=[master, data, ingest, ml, remote_cluster_client]
      - node.roles=[master, data]
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      # - cluster.initial_master_nodes=es01,es02
      # - discovery.seed_hosts=es02:9301
      # - transport.port=9300
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es01-public.rule=Host(`es01.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es01-public.entrypoints=https"
      - "traefik.http.routers.es01-public.tls=true"
      - "traefik.http.routers.es01-public.middlewares=es01-platypus-${APP_ID}@docker"
      - "traefik.http.middlewares.es01-platypus-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.es01-platypus-${APP_ID}.redirectscheme.port=9200"
      - "traefik.http.services.es01-platypus-${APP_ID}.loadbalancer.server.port=9200"
      - "traefik.http.services.es01-platypus-${APP_ID}.loadbalancer.server.scheme=https"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 60s
      retries: 500

  kibana:
    # Ubuntu - kibana 
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${KIBANA_PORT}:5601
      - ${APM_PORT}:8200
      - ${FLEET_PORT}:8220
    container_name: "${APP_ID}-kibana"
    hostname: "kibana.${APP_HOST}.${INT_NETWORK}"
    volumes:
      - ./certs:/usr/share/kibana/config/certs
      - ./extras/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kibanadata:/usr/share/kibana
      - ./logs/kibana:/usr/share/kibana/logs
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca/ca.crt
      - cluster.name=${CLUSTER_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.kibana-public.rule=Host(`kibana.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.kibana-public.entrypoints=https"
      - "traefik.http.routers.kibana-public.tls=true"
      - "traefik.http.routers.kibana-public.middlewares=kibana-platypus-${APP_ID}@docker"
      - "traefik.http.middlewares.kibana-platypus-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.kibana-platypus-${APP_ID}.redirectscheme.port=5601"
      - "traefik.http.services.kibana-platypus-${APP_ID}.loadbalancer.server.port=5601"
      - "traefik.http.services.kibana-platypus-${APP_ID}.loadbalancer.server.scheme=https"
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt -I https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 60s
      retries: 500

  logstash:
    # Ubuntu - logstash 
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      kibana:
        condition: service_healthy
    image: logstash:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-logstash"
    hostname: "logstash.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${LOGSTASH_PORT}:5044
    volumes:
      - ./certs:/usr/share/logstash/config/certs
      - /var/run/docker.sock:/var/run/docker.sock
      - ./extras/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./extras/logstash/logstash.conf:/usr/share/logstash/config/logstash.conf
      # - ./extras/logstash/elastic-agent-pipeline.conf:/usr/share/logstash/config/elastic-agent-pipeline.conf
      - logstashdata:/usr/share/logstash/
      - ./logs/logstash:/usr/share/logstash/logs
    environment:
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_SSL_CERTIFICATEAUTHORITY=/usr/share/logstash/config/certs/ca/ca.crt
      - cluster.name=${CLUSTER_NAME}

  metricbeat:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-metric"
    hostname: "metric"
    user: root
    networks:
      # local network:
      - intnet
    ports:
      - 5066:5066
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
      - ./certs:/usr/share/metricbeat/certs
      - ./extras/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
      - metricbeatdata:/usr/share/metricbeat
      - ./logs/metric:/usr/share/metricbeat/logs
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/metricbeat/certs/ca/ca.crt
      - cluster.name=${CLUSTER_NAME}
    healthcheck:
      test: "metricbeat test output | grep 'talk to server... OK'"
      interval: 10s
      timeout: 60s
      retries: 500
   
  heartbeat:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/heartbeat:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-heart"
    hostname: "heart"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    # ports:
    #  - 5067:5067
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/heartbeat/certs
      - heartbeatdata:/usr/share/heartbeat
      - ./extras/heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml
      - ./logs/heart:/usr/share/heartbeat/logs
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/heartbeat/certs/ca/ca.crt
      - cluster.name=${CLUSTER_NAME}
    healthcheck:
      test: "heartbeat test output | grep 'talk to server... OK'"
      interval: 10s
      timeout: 60s
      retries: 500

  filebeat:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-file"
    hostname: "file"
    networks:
      # local network:
      - intnet
    # ports:
    #  - 5068:5068
    volumes:
      - ./certs:/usr/share/filebeat/certs
      - /var/run/docker.sock:/var/run/docker.sock
      - ./extras/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - filebeatdata:/usr/share/filebeat
      - ./logs/file:/usr/share/filebeat/logs
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/filebeat/certs/ca/ca.crt
      - cluster.name=${CLUSTER_NAME}
    healthcheck:
      test: "filebeat test output | grep 'talk to server... OK'"
      interval: 10s
      timeout: 60s
      retries: 500

  eps:
    # Ubuntu - enterprisesearch
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      kibana:
        condition: service_healthy
    image: docker.elastic.co/enterprise-search/enterprise-search:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-eps"
    hostname: "eps"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    # ports:
    # - ${ENTERPRISE_SEARCH_PORT}:3002
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/enterprise-search/config/certs:ro
      - ./extras/enterprise-search/enterprise-search.yml:/usr/share/enterprise-search/config/enterprise-search.yml
      - epsdata:/usr/share/enterprise-search
      - ./logs/eps:/var/log/enterprise-search:rw
    environment:
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_SSL_CERTIFICATEAUTHORITIES=/usr/share/enterprise-search/config/certs/ca/ca.crt
      - secret_management.encryption_keys=[${ENCRYPTION_KEYS}]
      # - cluster.name=${CLUSTER_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.eps-public.rule=Host(`eps.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.eps-public.entrypoints=https"
      - "traefik.http.routers.eps-public.tls=true"
      - "traefik.http.routers.eps-public.middlewares=es01-platypus-${APP_ID}@docker"
    mem_limit: ${MEM_LIMIT2}
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s -I http://localhost:3002 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 500

#
#   If you want cerebro the another web for elasticsearch
#
  cerebro:
    # Debian - Cerebro
    depends_on:
      es01:
        condition: service_healthy
    image: lmenezes/cerebro:0.9.4
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-cerebro"
    hostname: "cerebro"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    # ports:
    # - 9000:9000
    volumes:
      - ./certs:/opt/cerebro/conf/certs:ro
      - ./extras/cerebro/application.conf:/opt/cerebro/conf/application.conf
    environment:
      - BASIC_AUTH_USER=elastic
      - BASIC_AUTH_PWD=${ELASTIC_PASSWORD}
      - CERTIFICATEAUTHORITY=/opt/cerebro/conf/certs/ca/ca.crt
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.cerebro-public.rule=Host(`cerebro.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.cerebro-public.entrypoints=https"
      - "traefik.http.routers.cerebro-public.tls=true"
      - "traefik.http.services.cerebro-platypus-${APP_ID}.loadbalancer.server.port=9000"
      - "traefik.http.services.cerebro-platypus-${APP_ID}.loadbalancer.server.scheme=http"
 
#
#   If you want your own configured fleet server or if you want to train the configuration 
#
#   fleet:
#     # Ubuntu - fleet
#     depends_on:
#       es01:
#         condition: service_healthy
#     depends_on:
#       apm:
#         condition: service_healthy
#     image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     networks:
#       # for traefik:
#       - default
#       # local network:
#       - intnet
#     ports:
#       - ${FLEET_PORT}:8220
#     container_name: "${APP_ID}-fleet"
#     hostname: "fleet"
#     user: root # note, synthetic browser monitors require this set to `elastic-agent`
#     # user: elastic-agent
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - ./certs:/usr/share/elastic-agent/certs
#       - ./extras/elastic-agent/elastic-agent.yml:/usr/share/elastic-agent/elastic-agent.yml
#       - fleetdata:/usr/share/elastic-agent
#     environment:
#       - ELASTICSEARCH_HOSTS=https://es01:9200
#       - ELASTICSEARCH_USERNAME=elastic
#       - ELASTICSEARCH_PASSWORD=${APM_PASSWORD}
#       - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/elastic-agent/certs/ca/ca.crt
#       - FLEET_ENROLL=1
#       - FLEET_SERVER_ENABLE=true
#       - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01:9200
#       - FLEET_SERVER_ELASTICSEARCH_USERNAME=elastic
#       - FLEET_SERVER_ELASTICSEARCH_PASSWORD=${APM_PASSWORD}
#       - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt
#       - FLEET_SERVER_ELASTICSEARCH_REQUESTTIMEOUT=60000
#       # - FLEET_SERVER_SERVICE_TOKEN=${FLEET_SERVER_SERVICE_TOKEN}
#       # - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN}
#       - FLEET_CA=/usr/share/elastic-agent/certs/ca/ca.crt
#       - FLEET_SERVER_CERT=/usr/share/elastic-agent/certs/fleet/fleet.crt
#       - FLEET_SERVER_CERT_KEY=/usr/share/elastic-agent/certs/fleet/fleet.key
#       - FLEET_URL=https://fleet:8220
#       - KIBANA_FLEET_ELASTICSEARCH_HOST=https://es01:9200
#       - KIBANA_FLEET_USERNAME=elastic
#       - KIBANA_FLEET_PASSWORD=${APM_PASSWORD}
#       - KIBANA_FLEET_HOST=https://kibana:5601
#       - KIBANA_FLEET_CA=/usr/share/elastic-agent/certs/ca/ca.crt
#       - KIBANA_FLEET_SETUP=1
#       - KIBANA_FLEET_REQUESTTIMEOUT=300000
#     healthcheck:
#       test: "elastic-agent status | grep 'Status: HEALTHY'"
#       interval: 10s
#       timeout: 60s
#       retries: 500
  
#
#   If you want your own configured apm servert or if you want to train the configuration 
#
#   apm:
#     depends_on:
#       es01:
#         condition: service_healthy
#     depends_on:
#       kibana:
#         condition: service_healthy
#     image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-apm"
#     hostname: "apm"
#     networks:
#       # local network:
#       - intnet
#     ports:
#       - ${APM_PORT}:8200
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - ./certs:/usr/share/apm-server/certs
#       - ./extras/apm-server/apm-server.yml:/usr/share/apm-server/apm-server.yml
#       - ./logs/apm:/usr/share/apm-server/logs
#       - apmdata:/usr/share/apm-server
#     environment:
#       - ELASTICSEARCH_USERNAME=elastic
#       - ELASTICSEARCH_PASSWORD=${APM_PASSWORD}
#       - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/apm-server/certs/ca/ca.crt
#     healthcheck:
#       test: "apm-server test output | grep 'talk to server... OK'"
#       interval: 10s
#       timeout: 60s
#       retries: 500

volumes:
  esdata01:
    external: true
    name: "${APP_ID}-es01"
  kibanadata:
    external: true
    name: "${APP_ID}-kibana"
  logstashdata:
    external: true
    name: "${APP_ID}-log"
  heartbeatdata:
    external: true
    name: "${APP_ID}-heart"
  metricbeatdata:
    external: true
    name: "${APP_ID}-metric"
  filebeatdata:
    external: true
    name: "${APP_ID}-file"
  epsdata:
    external: true
    name: "${APP_ID}-eps"
#    
# You can remove this. It's for my prune volume deletion protection ;-)
#
  wordpressbedrockdb:
    external: true
    name: wordpress-bedrock-db
  wordpressdb99:
    external: true
    name: wordpress-db-99
  wordpresspma99:
    external: true
    name: wordpress-pma-99
  wordpressredis99:
    external: true
    name: wordpress-redis-99
  wordpresswp99:
    external: true
    name: wordpress-wp-99
  tomboladb:
    external: true
    name: tombola-db
