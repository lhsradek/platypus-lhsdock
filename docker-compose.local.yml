version: '3.9'

networks:
  default:
    external: true
    name: ${DOCKER_NETWORK}
  intnet:
    external: false
    name: ${INT_NETWORK}

services:

#
# === E - Elasticsearch ===
#
  es01:
    depends_on:
      setup:
        condition: service_healthy
    # Ubuntu - elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-es01"
    hostname: "es01.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${ES_PORT}:9200
      - 9300:9300
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./logs/es01:/usr/share/elasticsearch/logs
      - esdata01:/usr/share/elasticsearch
    environment:
      - node.name=es01
      - http.host=0.0.0.0
      - http.port=9200
      - transport.port=9300
      - node.roles=[master, data, ingest, ml, remote_cluster_client]
      - cluster.name=${CLUSTER_NAME}
      # - discovery.type=single-node  # no! minimal is two elasticsearch for green elastic cluster and kibana!
      # - cluster.initial_master_nodes=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      # - discovery.seed_hosts=es02:9301
      - discovery.seed_hosts=es02:9301,es03:9302
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.http.ssl.certificate=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.transport.ssl.certificate=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=${ES01_JAVA_OPTS}"
    # Traefik redirects the stray query directly to elastic. It is nice that the running service can be seen in traffic
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es01-public.rule=Host(`es01.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es01-public.entrypoints=https"
      - "traefik.http.routers.es01-public.tls=true"
      - "traefik.http.routers.es01-public.middlewares=es01-${APP_ID}@docker"
      - "traefik.http.middlewares.es01-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.es01-${APP_ID}.redirectscheme.port=9200"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.port=9200"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.scheme=https"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://es01.${APP_HOST}.${INT_NETWORK}:9200 | grep -q 'missing authentication credentials'" ]
      interval: 10s
      timeout: 60s
      retries: 500
 
  es02:
    depends_on:
      es01:
        condition: service_healthy
    # Ubuntu - elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-es02"
    hostname: "es02.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - 9201:9201
      - 9301:9301
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./logs/es02:/usr/share/elasticsearch/logs
      - esdata02:/usr/share/elasticsearch
    environment:
      - node.name=es02
      - http.host=0.0.0.0
      - http.port=9201
      - transport.port=9301
      - node.roles=[master, data, ingest, ml, remote_cluster_client]
      - cluster.name=${CLUSTER_NAME}
      # - cluster.initial_master_nodes=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      # - discovery.seed_hosts=es01:9300
      - discovery.seed_hosts=es01:9300,es03:9302
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.http.ssl.certificate=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.transport.ssl.certificate=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=${ES02_JAVA_OPTS}"
    # Traefik redirects the stray query directly to elastic.
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es02-public.rule=Host(`es02.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es02-public.entrypoints=https"
      - "traefik.http.routers.es02-public.tls=true"
      - "traefik.http.routers.es02-public.middlewares=es02-${APP_ID}@docker"
      - "traefik.http.middlewares.es02-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.es02-${APP_ID}.redirectscheme.port=9201"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.port=9201"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.scheme=https"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://es02.${APP_HOST}.${INT_NETWORK}:9201 | grep -q 'missing authentication credentials'" ]
      interval: 10s
      timeout: 60s
      retries: 500
 
#
#   Start with two elasticsearch, the third can be easily added after installation 
#
  es03:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Ubuntu - elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-es03"
    hostname: "es03.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - 9202:9202
      - 9302:9302
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./logs/es03:/usr/share/elasticsearch/logs
      - esdata03:/usr/share/elasticsearch
    environment:
      - node.name=es03
      - http.host=0.0.0.0
      - http.port=9202
      - transport.port=9302
      - node.roles=[master, data, ingest, ml, remote_cluster_client]
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01:9300,es02:9301
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.http.ssl.certificate=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.transport.ssl.certificate=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=${ES03_JAVA_OPTS}"
    # Traefik redirects the stray query directly to elastic.
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es03-public.rule=Host(`es03.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es03-public.entrypoints=https"
      - "traefik.http.routers.es03-public.tls=true"
      - "traefik.http.routers.es03-public.middlewares=es03-${APP_ID}@docker"
      - "traefik.http.middlewares.es03-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.es03-${APP_ID}.redirectscheme.port=9202"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.port=9202"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.scheme=https"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://es03.${APP_HOST}.${INT_NETWORK}:9202 | grep -q 'missing authentication credentials'" ]
      interval: 10s
      timeout: 60s
      retries: 500
  
#
# === L - Logstash ===
#
  logstash:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Ubuntu - logstash 
    image: logstash:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-logstash"
    hostname: "logstash.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${LOGSTASH_PORT}:5044
      # - 5055:5055
      # - 9600:9600
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/logstash/config/certs
      - ./extras/logstash/jvm.options:/usr/share/logstash/config/jvm.options:ro
      - ./extras/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./extras/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./extras/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./extras/logstash/elastic-agent-pipeline.conf:/usr/share/logstash/pipeline/elastic-agent-pipeline.conf:ro
      # - ./extras/logstash/gc.conf:/usr/share/logstash/pipeline/gc.conf:ro
      - logstash:/usr/share/logstash
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_SSL_CERTIFICATEAUTHORITY=/usr/share/logstash/config/certs/ca/ca.crt
      - LOGSTASH_SERVER_CERT=/usr/share/logstash/config/certs/logstash.${APP_HOST}.${INT_NETWORK}/logstash.${APP_HOST}.${INT_NETWORK}.crt
      - LOGSTASH_SERVER_CERT_KEY=/usr/share/logstash/config/certs/logstash.${APP_HOST}.${INT_NETWORK}/logstash.${APP_HOST}.${INT_NETWORK}.key
      - LOGSTASH_ELASTIC_AGENT_API_KEY=${LOGSTASH_ELASTIC_AGENT_API_KEY}
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://logstash.${APP_HOST}.${INT_NETWORK}:9600 | grep -q 'HTTP/1.1 200 OK'"]
      interval: 10s
      timeout: 60s
      retries: 500
    
#
# === K - kibana ===
#
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Ubuntu - kibana 
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${KIBANA_PORT}:5601
    container_name: "${APP_ID}-kibana"
    hostname: "kibana.${APP_HOST}.${INT_NETWORK}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/kibana/config/certs
      - ./logs/kibana:/usr/share/kibana/logs
      - ./extras/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./extras/kibana/node.options:/usr/share/kibana/config/node.options:ro
      - kibana:/usr/share/kibana
    environment:
      - SERVERNAME=kibana.${APP_HOST}.${INT_NETWORK}
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - ELASTICSEARCH_HOSTS=https://es01.${APP_HOST}.${INT_NETWORK}:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca/ca.crt
      - ELASTICSEARCH_SSL_SERVER_CERT=/usr/share/kibana/config/certs/kibana.${APP_HOST}.${INT_NETWORK}/kibana.${APP_HOST}.${INT_NETWORK}.crt
      - ELASTICSEARCH_SSL_SERVER_CERT_KEY=/usr/share/kibana/config/certs/kibana.${APP_HOST}.${INT_NETWORK}/kibana.${APP_HOST}.${INT_NETWORK}.key
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.kibana-public.rule=Host(`kibana.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.kibana-public.entrypoints=https"
      - "traefik.http.routers.kibana-public.tls=true"
      - "traefik.http.routers.kibana-public.middlewares=kibana-${APP_ID}@docker"
      - "traefik.http.middlewares.kibana-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.kibana-${APP_ID}.redirectscheme.port=5601"
      - "traefik.http.services.kibana-${APP_ID}.loadbalancer.server.port=5601"
      - "traefik.http.services.kibana-${APP_ID}.loadbalancer.server.scheme=https"
      - "traefik.http.services.kibana-${APP_ID}.loadbalancer.healthcheck.hostname=kibana.${APP_HOST}.${INT_NETWORK}"
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt -I https://kibana.${APP_HOST}.${INT_NETWORK}:5601 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 10s
      timeout: 60s
      retries: 500
  
#
# === APM Server ===
#
  apm:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Ubuntu - enterprisesearch
    image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-apm"
    hostname: "apm.${INT_NETWORK}"
    networks:
    # for traefik:
      - default
    # local network:
      - intnet
    # ports:
    #   - ${APM_PORT}:8200
    #   - 5066:5066
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/apm-server/certs
      - ./extras/apm-server/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
      - ./logs/apm:/usr/share/apm-server/logs
      - apm:/usr/share/apm-server
    environment:
      - AGENT_API_KEY=${AGENT_API_KEY}
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - APM_SERVER_CERT=/usr/share/apm-server/certs/apm.${INT_NETWORK}/apm.${INT_NETWORK}.crt
      - APM_SERVER_CERT_KEY=/usr/share/apm-server/certs/apm.${INT_NETWORK}/apm.${INT_NETWORK}.key
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${APM_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/apm-server/certs/ca/ca.crt
      - STAGE=${STAGE}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.apm-public.rule=Host(`apm.${INT_NETWORK}`)"
      - "traefik.http.routers.apm-public.entrypoints=https"
      - "traefik.http.routers.apm-public.tls=true"
      - "traefik.http.services.apm-${APP_ID}.loadbalancer.server.port=5066"
      - "traefik.http.services.apm-${APP_ID}.loadbalancer.server.scheme=http"
      - "traefik.http.services.apm-${APP_ID}.loadbalancer.healthcheck.hostname=apm.${INT_NETWORK}"
    healthcheck:
      # test: ["CMD-SHELL", "apm-server test output | grep 'talk to server... OK'"]
      test: ["CMD-SHELL", "curl -s -I http://apm.${INT_NETWORK}:8200 | grep -q 'HTTP/1.1 200 OK'"]
      interval: 10s
      timeout: 60s
      retries: 500
   
#
# === Metricbeat ===
#
  metricbeat:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    depends_on:
      kibana:
        condition: service_healthy
    # Ubuntu - metricbeat
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-metric"
    hostname: "metric.${INT_NETWORK}"
    user: root
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /run:/run
      - /var/run:/var/run
      - /:/hostfs:ro
      - ./certs:/usr/share/metricbeat/certs
      - ./extras/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
      - ./logs/metric:/usr/share/metricbeat/logs
      - metricbeat:/usr/share/metricbeat
    environment:
      - AGENT_API_KEY=${AGENT_API_KEY}
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTICSEARCH_HOSTS=https://es01.${APP_HOST}.${INT_NETWORK}:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${APM_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/metricbeat/certs/ca/ca.crt
      - EPS_PASSWORD=${EPS_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.metric-public.rule=Host(`metric.${INT_NETWORK}`)"
      - "traefik.http.routers.metric-public.entrypoints=https"
      - "traefik.http.routers.metric-public.tls=true"
      - "traefik.http.services.metric-${APP_ID}.loadbalancer.server.port=5066"
      - "traefik.http.services.metric-${APP_ID}.loadbalancer.server.scheme=http"
      - "traefik.http.services.metric-${APP_ID}.loadbalancer.healthcheck.hostname=metric.${INT_NETWORK}"
    healthcheck:
      # test: "metricbeat test output | grep 'talk to server... OK'"
      test: ["CMD-SHELL", "curl -s -I http://metric.${INT_NETWORK}:5066 | grep -q 'HTTP/1.1 200 OK'"]
      interval: 20s
      timeout: 10s
      retries: 50
         
#
# === Filebeat ===
#
  filebeat:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    depends_on:
      logstash:
        condition: service_healthy
    # Ubuntu - filebeat
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-file"
    hostname: "file.${INT_NETWORK}"
    networks:
    # for traefik:
      - default
    # local network:
      - intnet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
      - ./certs:/usr/share/filebeat/certs
      - ./extras/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs/file/logs:/usr/share/filebeat/logs
      # - ./logs/file/registry:/usr/share/filebeat/data/registry
      - ./logs/apm:/usr/share/filebeat/elogs/apm-server
      - ./logs/dokuwiki:/usr/share/filebeat/elogs/nginx/dokuwiki
      - ./logs/es01:/usr/share/filebeat/elogs/es01
      - ./logs/es02:/usr/share/filebeat/elogs/es02
      - ./logs/es03:/usr/share/filebeat/elogs/es03
      - ./logs/eps:/usr/share/filebeat/elogs/eps
      - ./logs/heart:/usr/share/filebeat/elogs/heart
      - ./logs/kibana:/usr/share/filebeat/elogs/kibana
      - ./logs/nginx:/usr/share/filebeat/elogs/nginx/default
      - ./logs/metric:/usr/share/filebeat/elogs/metric
      # - /root/platypus-wordpress-mysql/logs/wordpress-nginx/:/usr/share/filebeat/elogs/nginx/platypus-wordpress-mysql
      # - /root/tombola/logs/tombola-nginx/:/usr/share/filebeat/elogs/nginx/tombola
      # - /root/tombola/logs/tombola-tomcat/:/usr/share/filebeat/elogs/tomcat/tombola
      - /root/platypus-box/logs/traefik:/usr/share/filebeat/elogs/traefik
      - filebeat:/usr/share/filebeat
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - AGENT_API_KEY=${AGENT_API_KEY}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTICSEARCH_HOSTS=https://es01.${APP_HOST}.${INT_NETWORK}:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/filebeat/certs/ca/ca.crt
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.file-public.rule=Host(`file.${INT_NETWORK}`)"
      - "traefik.http.routers.file-public.entrypoints=https"
      - "traefik.http.routers.file-public.tls=true"
      - "traefik.http.services.file-${APP_ID}.loadbalancer.server.port=5066"
      - "traefik.http.services.file-${APP_ID}.loadbalancer.server.scheme=http"
      - "traefik.http.services.file-${APP_ID}.loadbalancer.healthcheck.hostname=file.${INT_NETWORK}"
    healthcheck:
      # test: "filebeat test output | grep 'talk to server... OK'"
      test: ["CMD-SHELL", "curl -s -I http://file.${INT_NETWORK}:5066 | grep -q 'HTTP/1.1 200 OK'"]
      interval: 10s
      timeout: 60s
      retries: 500

#
# === Heartbeat ===
#
  heartbeat:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Ubuntu - heartbeat
    image: docker.elastic.co/beats/heartbeat:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-heart"
    hostname: "heart.${INT_NETWORK}"
    networks:
      # for all the World 
      - default
      # local network:
      - intnet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/heartbeat/certs
      - ./extras/heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml
      - ./logs/heart:/usr/share/heartbeat/logs
      - heartbeat:/usr/share/heartbeat
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - AGENT_API_KEY=${AGENT_API_KEY}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTICSEARCH_HOSTS=https://es01.${APP_HOST}.${INT_NETWORK}:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/heartbeat/certs/ca/ca.crt
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.heart-public.rule=Host(`heart.${INT_NETWORK}`)"
      - "traefik.http.routers.heart-public.entrypoints=https"
      - "traefik.http.routers.heart-public.tls=true"
      - "traefik.http.services.heart-${APP_ID}.loadbalancer.server.port=5066"
      - "traefik.http.services.heart-${APP_ID}.loadbalancer.server.scheme=http"
      - "traefik.http.services.heart-${APP_ID}.loadbalancer.healthcheck.hostname=heart.${INT_NETWORK}"
    healthcheck:
      # test: "heartbeat test output | grep 'talk to server... OK'"
      test: ["CMD-SHELL", "curl -s -I http://heart.${INT_NETWORK}:5066 | grep -q 'HTTP/1.1 200 OK'"]
      interval: 10s
      timeout: 60s
      retries: 500
 
#   
# === Enterprisesearch ===
#
  eps:
    depends_on:
      kibana:
        condition: service_healthy
    depends_on:
      apm:
        condition: service_healthy
    # Ubuntu - enterprisesearch
    image: docker.elastic.co/enterprise-search/enterprise-search:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-eps"
    hostname: "eps.${INT_NETWORK}"
    networks:
    # for traefik:
      - default
    # local network:
      - intnet
    # ports:
    #  - ${ENTERPRISE_SEARCH_PORT}:3002
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/enterprise-search/config/certs:ro
      - ./extras/enterprise-search/enterprise-search.yml:/usr/share/enterprise-search/config/enterprise-search.yml:ro
      - ./extras/enterprise-search/env.sh:/usr/share/enterprise-search/config/env.sh:ro
      - ./logs/eps:/var/log/enterprise-search:rw
      - epsdata:/usr/share/enterprise-search
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTICSEARCH_HOSTS=https://es01.${APP_HOST}.${INT_NETWORK}:9200
      - ELASTIC_SSL_CERTIFICATEAUTHORITIES=/usr/share/enterprise-search/config/certs/ca/ca.crt
      - secret_management.encryption_keys=[${ENCRYPTION_KEYS}]
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://eps.${INT_NETWORK}:3002 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 10s
      timeout: 10s
      retries: 500
   
#
# Status and configurations of docker-cloud without using Kibana - Web console for REST.
#
  cerebro:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Debian - Cerebro
    image: lmenezes/cerebro:0.9.4
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-cerebro"
    hostname: "cerebro.${APP_HOST}.${INT_NETWORK}"
    networks:
    # for traefik:
      - default
    # local network:
      - intnet
    # ports:
    #  - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/opt/cerebro/conf/certs:ro
      - ./extras/cerebro/application.conf:/opt/cerebro/conf/application.conf
      - ./extras/cerebro/logback.xml:/opt/cerebro/conf/logback.xml
      - ./logs/cerebro:/opt/cerebro/logs:rw
    environment:
      - BASIC_AUTH_USER=elastic
      - BASIC_AUTH_PWD=${ELASTIC_PASSWORD}
      - CERTIFICATEAUTHORITY=/opt/cerebro/conf/certs/ca/ca.crt
      - CEREBRO_SERVER_CERT=/opt/cerebro/conf/certs/${CEREBRO_CERTNAME}.crt
      - CEREBRO_SERVER_CERT_KEY=/opt/cerebro/conf/certs/${CEREBRO_CERTNAME}.key
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.cerebro-public.rule=Host(`cerebro.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.cerebro-public.entrypoints=https"
      - "traefik.http.routers.cerebro-public.tls=true"
      - "traefik.http.services.cerebro-${APP_ID}.loadbalancer.server.port=9000"
      - "traefik.http.services.cerebro-${APP_ID}.loadbalancer.server.scheme=http"
      - "traefik.http.services.cerebro-${APP_ID}.loadbalancer.healthcheck.hostname=cerebro.${APP_HOST}.${INT_NETWORK}"
  
  weblhs:
    depends_on:
      setup:
        condition: service_healthy
    # Alpine Linux
    # lhsradek/lhsdock has openssl, perl and the program platypus.pl for certificates,
    # which I don't use much anymore, 'cause the Elastic Certificate Tool is used by webservice 'setup'.
    # build:
    #   context: ./context
    #   dockerfile: Dockerfile 
    # image: lhsradek/lhsdock:v3
    image: nginx:alpine
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-web"
    hostname: "${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - 4443:443
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - TZ=${TIME_ZONE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # if http
      # - ./extras/nginx/default-http.conf:/etc/nginx/conf.d/default.conf:ro
      # else if https
      - ./extras/nginx/default-https.conf:/etc/nginx/conf.d/default.conf:ro
      - ./extras/nginx/htpasswd:/etc/nginx/conf.d/htpasswd:ro
      - ./certs/ca/ca.crt:/etc/ssl/private/ca.crt:ro
      - ./certs/${CERTNAME}.crt:/etc/ssl/private/cacert.crt
      - ./certs/${CERTNAME}.key:/etc/ssl/private/cacert.key
      # fi
      # The first mount add bash and ping to nginx:alpine - lhsradek/lhsdock this dont'n need, see:
      # https://github.com/lhsradek/platypus-lhsdock/blob/main/context/Dockerfile of lhsradek/lhsdock:v3
      - ./context/root/bin/alpine/add.sh:/docker-entrypoint.d/05-add-packages.sh 
      - ./application/html:/var/www/html:ro
      - ./logs/nginx:/var/log/nginx
      - esdata01:/root/bin/volume/es01:ro
      - esdata02:/root/bin/volume/es02:ro
      # - esdata03:/root/bin/volume/es03:ro
      - logstash:/root/bin/volume/logstash:ro
      - kibana:/root/bin/volume/kibana:ro
      - apm:/root/bin/volume/apm:ro
      - filebeat:/root/bin/volume/file:ro
      - heartbeat:/root/bin/volume/heart:ro
      - metricbeat:/root/bin/volume/metric:ro
      - epsdata:/root/bin/volume/eps:ro
      # It's for my prune volume deletion protection:
      - wordpressbedrockdb:/root/bin/volume/bedrock-db:ro
      - wordpresswp99:/root/bin/volume/wordpress-wp-99:ro
      - wordpressdb99:/root/bin/volume/wordpress-db-99:ro
      - wordpresspma99:/root/bin/volume/wordpress-pma-99:ro
      - wordpressredis99:/root/bin/volume/wordpress-redis-99:ro
      - wordpressfleet99:/root/bin/volume/wordpress-fleet-99:ro
      - tomboladb:/root/bin/volume/tombola-db:ro
      - tombolafleet:/root/bin/volume/tombola-fleet:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.weblhs-public.rule=Host(`${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.weblhs-public.entrypoints=https"
      - "traefik.http.routers.weblhs-public.tls=true"
      - "traefik.http.services.weblhs-${APP_ID}.loadbalancer.server.port=443"
      - "traefik.http.services.weblhs-${APP_ID}.loadbalancer.server.scheme=https"
      - "traefik.http.services.weblhs-${APP_ID}.loadbalancer.healthcheck.hostname=${APP_HOST}.${INT_NETWORK}"
    healthcheck:
      test: "curl -s --cacert /etc/ssl/private/ca.crt -I https://docker.nginx.local/downloads | grep -q 'HTTP/2 301'"
      interval: 30s
      timeout: 2s
      retries: 50
 
  weblhs-php:
    depends_on:
      setup:
        condition: service_healthy
    # Alpine Linux
    # image: php:fpm-alpine
    image: lhsradek/fpm:v1
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-php"
    hostname: "weblhs-php.${INT_NETWORK}"
    networks:
      # for elastic and traefik in application/html/index.php
      - default
      # local network:
      - intnet
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTIC_APM_ENVIRONMENT=${STAGE}
      - ELASTIC_APM_HOSTNAME=weblhs-php.${INT_NETWORK}
      - ELASTIC_APM_LOG_LEVEL_STDERR=info
      - ELASTIC_APM_API_KEY=${ELASTIC_APM_API_KEY}
      # - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
      - ELASTIC_APM_SERVER_URL=http://apm.${INT_NETWORK}:8200
      - ELASTIC_APM_SERVICE_NAME=${APP_ID}
      - ELASTIC_APM_SERVICE_NODE_NAME=${APP_HOST}.${INT_NETWORK}
      - PUID=1000
      - PGID=1000
      - TZ=${TIME_ZONE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./extras/php/phpSettings.conf:/usr/local/etc/php-fpm.d/zzz-phpSettings.conf
      - ./application/html:/var/www/html:ro
      - ./logs/nginx/php-error.log:/var/log/error.log
      - ./logs/nginx/php-access.log:/var/log/access.log

  weblhs-wiki:
    # Alpine Linux
    depends_on:
      weblhs:
        condition: service_healthy
    image: lscr.io/linuxserver/dokuwiki:latest
    container_name: dokuwiki
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-wiki"
    hostname: "wiki.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    environment:
      - DOKUWIKI_PASSWORD=${ELASTIC_PASSWORD}
      - PUID=1000
      - PGID=1000
      - TZ=${TIME_ZONE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # The first mount add bash and ping to nginx:alpine
      - ./context/root/bin/alpine/add.sh:/etc/cont-init.d/05-add-packages.sh 
      - ./certs/ca/ca.crt:/config/keys/ca.pem:ro
      - ./certs/${WIKI_CERTNAME}.crt:/config/keys/cert.crt
      - ./certs/${WIKI_CERTNAME}.key:/config/keys/cert.key
      - ./extras/dokuwiki/config:/config
      - ./png/cerebro01.png:/config/dokuwiki/data/media/cerebro01.png
      - ./png/cerebro02.png:/config/dokuwiki/data/media/cerebro02.png
      - ./png/cerebro03.png:/config/dokuwiki/data/media/cerebro03.png
      - ./png/elastic-apm-php.png:/config/dokuwiki/data/media/elastic-apm-php.png
      - ./png/fleet01.png:/config/dokuwiki/data/media/fleet01.png
      - ./png/fleet02.png:/config/dokuwiki/data/media/fleet02.png
      - ./png/fleet03.png:/config/dokuwiki/data/media/fleet03.png
      - ./png/fleet04.png:/config/dokuwiki/data/media/fleet04.png
      - ./png/kibana01.png:/config/dokuwiki/data/media/kibana01.png
      - ./png/kibana02.png:/config/dokuwiki/data/media/kibana02.png
      - ./png/kibana03.png:/config/dokuwiki/data/media/kibana03.png
      - ./png/kibana04.png:/config/dokuwiki/data/media/kibana04.png
      - ./png/kibana05.png:/config/dokuwiki/data/media/kibana05.png
      - ./png/kibana06.png:/config/dokuwiki/data/media/kibana06.png
      - ./png/kibana07.png:/config/dokuwiki/data/media/kibana07.png
      - ./png/kibana08.png:/config/dokuwiki/data/media/kibana08.png
      - ./png/kibana09.png:/config/dokuwiki/data/media/kibana09.png
      - ./png/kibana10.png:/config/dokuwiki/data/media/kibana10.png
      - ./png/kibana11.png:/config/dokuwiki/data/media/kibana11.png
      - ./png/kibana12.png:/config/dokuwiki/data/media/kibana12.png
      - ./png/kibana13.png:/config/dokuwiki/data/media/kibana13.png
      - ./png/kibana14.png:/config/dokuwiki/data/media/kibana14.png
      - ./png/lhsdock.png:/config/dokuwiki/data/media/lhsdock.png
      - ./png/manager.png:/config/dokuwiki/data/media/manager.png
      - ./png/tomcat.png:/config/dokuwiki/data/media/tomcat.png
      - ./png/traefik01.png:/config/dokuwiki/data/media/traefik01.png
      - ./png/wiki.png:/config/dokuwiki/data/media/wiki.png
      - ./logs/dokuwiki:/config/log
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.weblhs-wiki-public.rule=Host(`wiki.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.weblhs-wiki-public.entrypoints=https"
      - "traefik.http.routers.weblhs-wiki-public.tls=true"
      - "traefik.http.services.weblhs-wiki-${APP_ID}.loadbalancer.server.port=443"
      - "traefik.http.services.weblhs-wiki-${APP_ID}.loadbalancer.server.scheme=https"
      - "traefik.http.services.weblhs-wiki-${APP_ID}.loadbalancer.healthcheck.hostname=wiki.${APP_HOST}.${INT_NETWORK}"

#
# setup makes certs and change passwords
#
  setup:
    # Ubuntu - elasticsearch
    # see https://www.elastic.co/guide/en/elasticsearch/reference/8.4/docker.html
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: "${APP_ID}-setup"
    hostname: "setup.${INT_NETWORK}"
    networks:
      # local network:
      - intnet
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          if [ ! -f config/certs/ca.zip ]; then
            bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          fi;
          unzip -n config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: ${APP_HOST}.traefik.local\n"\
          "    dns:\n"\
          "      - ${APP_HOST}.traefik.local\n"\
          "  - name: www.traefik.local\n"\
          "    dns:\n"\
          "      - www.traefik.local\n"\
          "  - name: ${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - ${APP_HOST}.${INT_NETWORK}\n"\
          "  - name: www.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - www.${INT_NETWORK}\n"\
          "  - name: apm.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - apm.${INT_NETWORK}\n"\
          "  - name: cerebro.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - cerebro.${APP_HOST}.${INT_NETWORK}\n"\
          "  - name: es01.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - es01.${APP_HOST}.${INT_NETWORK}\n"\
          "  - name: es02.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - es02.${APP_HOST}.${INT_NETWORK}\n"\
          "  - name: es03.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - es03.${APP_HOST}.${INT_NETWORK}\n"\
          "  - name: eps.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - eps.${INT_NETWORK}\n"\
          "  - name: file.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - file.${INT_NETWORK}\n"\
          "  - name: fleet.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - fleet.${APP_HOST}.${INT_NETWORK}\n"\
          "  - name: heart.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - heart.${INT_NETWORK}\n"\
          "  - name: kibana.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - kibana.${APP_HOST}.${INT_NETWORK}\n"\
          "  - name: logstash.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - logstash.${APP_HOST}.${INT_NETWORK}\n"\
          "  - name: metric.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - metric.${INT_NETWORK}\n"\
          "  - name: wiki.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - wiki.${APP_HOST}.${INT_NETWORK}\n"\
          "  - name: ${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - ${APP_HOST}.tomcat.local\n"\
          "  - name: www.tomcat.local\n"\
          "    dns:\n"\
          "      - www.tomcat.local\n"\
          "  - name: tombola.${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - tombola.${APP_HOST}.tomcat.local\n"\
          "  - name: tombola.www.tomcat.local\n"\
          "    dns:\n"\
          "      - tombola.www.tomcat.local\n"\
          "  - name: ad.${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - ad.${APP_HOST}.tomcat.local\n"\
          "  - name: ad.www.tomcat.local\n"\
          "    dns:\n"\
          "      - ad.www.tomcat.local\n"\
          "  - name: db.${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - db.${APP_HOST}.tomcat.local\n"\
          "  - name: db.www.tomcat.local\n"\
          "    dns:\n"\
          "      - db.www.tomcat.local\n"\
          "  - name: fleet.${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - fleet.${APP_HOST}.tomcat.local\n"\
          "  - name: fleet.www.tomcat.local\n"\
          "    dns:\n"\
          "      - fleet.www.tomcat.local\n"\
          "  - name: ${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - ${APP_HOST}.wordpress.local\n"\
          "  - name: www.wordpress.local\n"\
          "    dns:\n"\
          "      - www.wordpress.local\n"\
          "  - name: wp.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - wp.${APP_HOST}.wordpress.local\n"\
          "  - name: wp.www.wordpress.local\n"\
          "    dns:\n"\
          "      - wp.www.wordpress.local\n"\
          "  - name: wpa.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - wpa.${APP_HOST}.wordpress.local\n"\
          "  - name: wpa.www.wordpress.local\n"\
          "    dns:\n"\
          "      - wpa.www.wordpress.local\n"\
          "  - name: pma.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - pma.${APP_HOST}.wordpress.local\n"\
          "  - name: pma.www.wordpress.local\n"\
          "    dns:\n"\
          "      - pma.www.wordpress.local\n"\
          "  - name: db.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - db.${APP_HOST}.wordpress.local\n"\
          "  - name: db.www.wordpress.local\n"\
          "    dns:\n"\
          "      - db.www.wordpress.local\n"\
          "  - name: fleet.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - fleet.${APP_HOST}.wordpress.local\n"\
          "  - name: fleet.www.wordpress.local\n"\
          "    dns:\n"\
          "      - fleet.www.wordpress.local\n"\
          > config/certs/instances.yml;
          if [ ! -f config/certs/certs.zip ]; then
            bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          fi;
          unzip -n config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        # find . -type d -exec chmod 750 \{\} \;;
        find . -type d -exec chmod 755 \{\} \;; # logstash
        find . -type f -exec chmod 640 \{\} \;;
        find . -type f -name ca.crt -exec chmod 644 \{\} \;; # logstash
        find . -type f -name logstash.docker.nginx.local.crt -exec chmod 644 \{\} \;; # logstash
        find . -type f -name logstash.docker.nginx.local.key -exec chmod 644 \{\} \;; # logstash
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01.${APP_HOST}.${INT_NETWORK}:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        #
        # create role Stack Management > Roles standalone_agent https://www.elastic.co/guide/en/fleet/master/grant-access-to-elasticsearch.html        
        # <code>
        #   {
        #     "standalone_agent": {
        #       "cluster": ["monitor"],
        #       "indices": [
        #         {
        #           "names": ["logs-*-*", "metrics-*-*", "traces-*-*", "synthetics-*-*"],
        #           "privileges": ["auto_configure", "create_doc"]
        #         }
        #       ]
        #     }
        #   }
        # </code>
        #
        echo "Setting apm_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/apm_system/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting fleet-server password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/fleet-server/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # 
        echo "Setting beats_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/beats_system/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "Setting remote_monitoring_user password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/remote_monitoring_user/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "Setting logstash_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/logstash_system/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        #
        # echo "Setting logstash_writer password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/logstash_writer/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        #
        echo "Setting enterprise_search password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/enterprise_search/_password -d "{\"password\":\"${EPS_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.crt ]"]
      interval: 5s
      timeout: 5s
      retries: 120
#
# Tree for certs, *.pem (for traefik) created by:
# find . -name *.crt -exec bash -c 'openssl x509 -in {} -out ${1%.crt}.pem' - {} \;;
#
# It's all my devel certs. My ${INT_NETWORK} is 'nginx.logal' (see https://github.com/lhsradek/platypus-lhsdock/blob/main/.env.dist)
#
# ├── ca
# │   ├── ca.crt
# │   └── ca.key
# │
# │  == treefik.local ==
# │
# ├── docker.traefik.local
# │   ├── docker.traefik.local.crt
# │   └── docker.traefik.local.key
# │
# │  == nginx.local ==
# │
# ├── docker.nginx.local
# │   ├── docker.nginx.local.crt
# │   └── docker.nginx.local.key
# ├── apm.fleet.nginx.local
# │   ├── apm.fleet.nginx.local.crt
# │   └── apm.fleet.nginx.local.key
# ├── apm.nginx.local
# │   ├── apm.nginx.local.crt
# │   └── apm.nginx.local.key
# ├── cerebro.docker.nginx.local
# │   ├── cerebro.docker.nginx.local.crt
# │   └── cerebro.docker.nginx.local.key
# ├── eps.nginx.local
# │   ├── eps.nginx.local.crt
# │   └── eps.nginx.local.key
# ├── es01.docker.nginx.local
# │   ├── es01.docker.nginx.local.crt
# │   └── es01.docker.nginx.local.key
# ├── es02.docker.nginx.local
# │   ├── es02.docker.nginx.local.crt
# │   └── es02.docker.nginx.local.key
# ├── es03.docker.nginx.local
# │   ├── es03.docker.nginx.local.crt
# │   └── es03.docker.nginx.local.key
# ├── fleet.nginx.local
# │   ├── fleet.nginx.local.crt
# │   └── fleet.nginx.local.key
# ├── kibana.docker.nginx.local
# │   ├── kibana.docker.nginx.local.crt
# │   └── kibana.docker.nginx.local.key
# ├── logstash.docker.nginx.local
# │   ├── logstash.docker.nginx.local.crt
# │   └── logstash.docker.nginx.local.key
# ├── wiki.docker.nginx.local
# │   ├── wiki.docker.nginx.local.crt
# │   └── wiki.docker.nginx.local.key
# │
# │  == tomcat.local ==
# │
# ├── docker.tomcat.local
# │   ├── docker.tomcat.local.crt
# │   └── docker.tomcat.local.key
# ├── ad.docker.tomcat.local
# │   ├── ad.docker.tomcat.local.crt
# │   └── ad.docker.tomcat.local.key
# ├── tombola.docker.tomcat.local
# │   ├── tombola.docker.tomcat.local.crt
# │   └── tombola.docker.tomcat.local.key
# │
# │  == wordpress.local ==
# │
# ├── docker.wordpress.local
# │   ├── docker.wordpress.local.crt
# │   └── docker.wordpress.local.key
# ├── db.docker.wordpress.local
# │   ├── db.docker.wordpress.local.crt
# │   └── db.docker.wordpress.local.key
# ├── pma.docker.wordpress.local
# │   ├── pma.docker.wordpress.local.crt
# │   └── pma.docker.wordpress.local.key
# ├── wpa.docker.wordpress.local
# │   ├── wpa.docker.wordpress.local.crt
# │   └── wpa.docker.wordpress.local.key
# ├── wp.docker.wordpress.local
# │   ├── wp.docker.wordpress.local.crt
# │   └── wp.docker.wordpress.local.key
# │
# ├── certs.zip
# ├── ca.zip
# └── instances.yml

volumes:
  apm:
    external: true
    name: "${APP_ID}-apm"
  esdata01:
    external: true
    name: "${APP_ID}-es01"
  esdata02:
    external: true
    name: "${APP_ID}-es02"
  esdata03:
    external: true
    name: "${APP_ID}-es03"
  epsdata:
    external: true
    name: "${APP_ID}-eps"
  filebeat:
    external: true
    name: "${APP_ID}-file"
  kibana:
    external: true
    name: "${APP_ID}-kibana"
  logstash:
    external: true
    name: "${APP_ID}-logstash"
  heartbeat:
   external: true
   name: "${APP_ID}-heart"
  metricbeat:
   external: true
   name: "${APP_ID}-metric"
#    
# You can remove this. It's for my prune volume deletion protection:
#
  wordpressbedrockdb:
    external: true
    name: wordpress-bedrock-db
  wordpressdb99:
    external: true
    name: wordpress-db-99
  wordpresspma99:
    external: true
    name: wordpress-pma-99
  wordpressredis99:
    external: true
    name: wordpress-redis-99
  wordpressfleet99:
    external: true
    name: wordpress-fleet-99
  wordpresswp99:
    external: true
    name: wordpress-wp-99
  tomboladb:
    external: true
    name: tombola-db
  tombolafleet:
    external: true
    name: tombola-fleet
