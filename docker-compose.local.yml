version: '3.9'

networks:
  default:
    external: true
    name: ${DOCKER_NETWORK}
  intnet:
    external: false
    name: ${INT_NETWORK}
    driver: bridge

services:

#
# === E - Elasticsearch ===
#
  es01:
    depends_on:
      setup:
        condition: service_healthy
    # Ubuntu - elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-es01"
    hostname: "es01.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${ES_PORT}:9200
      - 9300:9300
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./logs/es01:/usr/share/elasticsearch/logs
      - esdata01:/usr/share/elasticsearch
    environment:
      - node.name=es01
      - http.port=9200
      - transport.port=9300
      - node.roles=[master, data, ingest, ml, remote_cluster_client]
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02
      # - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02:9301
      # - discovery.seed_hosts=es02:9301,es03:9302
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true        
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.http.ssl.certificate=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.transport.ssl.certificate=certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=${ES01_JAVA_OPTS}
    # Traefik redirects the stray query directly to elastic. It is nice that the running service can be seen in traffic
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es01-public.rule=Host(`es01.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es01-public.entrypoints=https"
      - "traefik.http.routers.es01-public.tls=true"
      - "traefik.http.routers.es01-public.middlewares=es01-${APP_ID}@docker"
      - "traefik.http.middlewares.es01-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.es01-${APP_ID}.redirectscheme.port=9200"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.port=9200"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.scheme=https"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://es01.${APP_HOST}.${INT_NETWORK}:9200 | grep -q 'missing authentication credentials'" ]
      interval: 5s
      timeout: 5s
      retries: 500
 
  es02:
    depends_on:
      es01:
        condition: service_healthy
    # Ubuntu - elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-es02"
    hostname: "es02.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - 9201:9201
      - 9301:9301
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./logs/es02:/usr/share/elasticsearch/logs
      - esdata02:/usr/share/elasticsearch
    environment:
      - node.name=es02
      - http.port=9201
      - transport.port=9301
      - node.roles=[master, data, ingest, ml, remote_cluster_client]
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02
      # - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01:9300
      # - discovery.seed_hosts=es01:9300,es03:9302
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true        
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.http.ssl.certificate=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.key
      - xpack.security.transport.ssl.certificate=certs/es02.${APP_HOST}.${INT_NETWORK}/es02.${APP_HOST}.${INT_NETWORK}.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=${ES02_JAVA_OPTS}
    # Traefik redirects the stray query directly to elastic. It is nice that the running service can be seen in traffic
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es02-public.rule=Host(`es02.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es02-public.entrypoints=https"
      - "traefik.http.routers.es02-public.tls=true"
      - "traefik.http.routers.es02-public.middlewares=es02-${APP_ID}@docker"
      - "traefik.http.middlewares.es02-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.es02-${APP_ID}.redirectscheme.port=9201"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.port=9201"
      - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.scheme=https"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://es02.${APP_HOST}.${INT_NETWORK}:9201 | grep -q 'missing authentication credentials'" ]
      interval: 5s
      timeout: 5s
      retries: 500
 
#
#   Start with two elasticsearch, the third can be easily added after installation. Three nodes are a robust solution.
#   Similar to how robust people tend to be slow, it takes a long time to restart three nodes and to go from red to green.
#
#   es03:
#     depends_on:
#       es01:
#         condition: service_healthy
#     depends_on:
#       es02:
#         condition: service_healthy
#     # Ubuntu - elasticsearch
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-es03"
#     hostname: "es03.${APP_HOST}.${INT_NETWORK}"
#     networks:
#       # for traefik:
#       - default
#       # local network:
#       - intnet
#     ports:
#       - 9202:9202
#       - 9302:9302
#     volumes:
#       - ./certs:/usr/share/elasticsearch/config/certs
#       - ./logs/es03:/usr/share/elasticsearch/logs
#       - esdata03:/usr/share/elasticsearch
#     environment:
#       - node.name=es03
#       - http.port=9202
#       - transport.port=9302
#       - node.roles=[master, data, ingest, ml, remote_cluster_client]
#       - cluster.name=${CLUSTER_NAME}
#       - cluster.initial_master_nodes=es01,es02,es03
#       - discovery.seed_hosts=es01:9300,es02:9301
#       - bootstrap.memory_lock=true
#       - xpack.security.enabled=true
#       - xpack.security.authc.api_key.enabled=true        
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.key
#       - xpack.security.http.ssl.certificate=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.http.ssl.verification_mode=certificate
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.key
#       - xpack.security.transport.ssl.certificate=certs/es03.${APP_HOST}.${INT_NETWORK}/es03.${APP_HOST}.${INT_NETWORK}.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.transport.ssl.verification_mode=certificate
#       - xpack.license.self_generated.type=${LICENSE}
#       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#       - ES_JAVA_OPTS=${ES03_JAVA_OPTS}
#     # Traefik redirects the stray query directly to elastic. It is nice that the running service can be seen in traffic
#     labels:
#       - "traefik.enable=true"
#       - "traefik.docker.network=${DOCKER_NETWORK}"
#       - "traefik.http.routers.es03-public.rule=Host(`es03.${APP_HOST}.${INT_NETWORK}`)"
#       - "traefik.http.routers.es03-public.entrypoints=https"
#       - "traefik.http.routers.es03-public.tls=true"
#       - "traefik.http.routers.es03-public.middlewares=es03-${APP_ID}@docker"
#       - "traefik.http.middlewares.es03-${APP_ID}.redirectscheme.scheme=https"
#       - "traefik.http.middlewares.es03-${APP_ID}.redirectscheme.port=9202"
#       - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.port=9202"
#       - "traefik.http.services.elasticsearch-${APP_ID}.loadbalancer.server.scheme=https"
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://es03.${APP_HOST}.${INT_NETWORK}:9202 | grep -q 'missing authentication credentials'" ]
#       interval: 5s
#       timeout: 5s
#       retries: 500
  
#
# === L - Logstash ===
#
  logstash:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Ubuntu - logstash 
    image: logstash:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-logstash"
    hostname: "logstash.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${LOGSTASH_PORT}:5044
      # - 9600:9600
    volumes:
      - ./certs/ca/ca.crt:/usr/share/logstash/config/certs/ca.crt
      - ./extras/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./extras/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./extras/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - logstash:/usr/share/logstash
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_SSL_CERTIFICATEAUTHORITY=/usr/share/logstash/config/certs/ca.crt
      - LOGSTASH_ELASTIC_AGENT_API_KEY=${LOGSTASH_ELASTIC_AGENT_API_KEY}
      - LS_JAVA_OPTS=${LS_JAVA_OPTS}
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://logstash.${APP_HOST}.${INT_NETWORK}:9600 | grep -q 'HTTP/1.1 200 OK'"]
      interval: 5s
      timeout: 5s
      retries: 500
      
#
# === K - kibana ===
#
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Ubuntu - kibana 
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-kibana"
    hostname: "kibana.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${KIBANA_PORT}:5601
    volumes:
      - ./certs:/usr/share/kibana/config/certs
      - ./logs/kibana:/usr/share/kibana/logs
      - ./extras/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - kibana:/usr/share/kibana
    environment:
      - SERVERNAME=kibana.${APP_HOST}.${INT_NETWORK}
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - ELASTIC_APM_ENVIRONMENT=${STAGE}
      - ELASTICSEARCH_HOSTS=https://es01.${APP_HOST}.${INT_NETWORK}:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca/ca.crt
      - ELASTICSEARCH_SSL_SERVER_CERT=/usr/share/kibana/config/certs/kibana.${APP_HOST}.${INT_NETWORK}/kibana.${APP_HOST}.${INT_NETWORK}.crt
      - ELASTICSEARCH_SSL_SERVER_CERT_KEY=/usr/share/kibana/config/certs/kibana.${APP_HOST}.${INT_NETWORK}/kibana.${APP_HOST}.${INT_NETWORK}.key
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - STACK_VERSION=${STACK_VERSION}
      - STV=${STV}
      - NODE_OPTIONS=${KIBANA_NODE_OPTS}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.kibana-public.rule=Host(`kibana.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.kibana-public.entrypoints=https"
      - "traefik.http.routers.kibana-public.tls=true"
      - "traefik.http.routers.kibana-public.middlewares=kibana-${APP_ID}@docker"
      - "traefik.http.middlewares.kibana-${APP_ID}.redirectscheme.scheme=https"
      - "traefik.http.middlewares.kibana-${APP_ID}.redirectscheme.port=5601"
      - "traefik.http.services.kibana-${APP_ID}.loadbalancer.server.port=5601"
      - "traefik.http.services.kibana-${APP_ID}.loadbalancer.server.scheme=https"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt -I https://kibana.${APP_HOST}.${INT_NETWORK}:5601 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 5s
      timeout: 5s
      retries: 500

#   
# === Heartbeat ===
#     
  heartbeat:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Ubuntu - heartbeat
    image: docker.elastic.co/beats/heartbeat:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-heartbeat"
    hostname: "heartbeat.${INT_NETWORK}"
    networks:
      # for All the World
      - default
      # local network:
      - intnet
    volumes:
      - ./certs:/usr/share/heartbeat/certs
      - ./extras/heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml
      - heartbeat:/usr/share/heartbeat
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/heartbeat/certs/ca/ca.crt
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.heartbeat-public.rule=Host(`heartbeat.${INT_NETWORK}`)"
      - "traefik.http.routers.heartbeat-public.entrypoints=https"
      - "traefik.http.routers.heartbeat-public.tls=true"
      - "traefik.http.services.heartbeat-${APP_ID}.loadbalancer.server.port=5066"
      - "traefik.http.services.heartbeat-${APP_ID}.loadbalancer.server.scheme=http"
    healthcheck:
      # test: "heartbeat test output | grep 'talk to server... OK'"
      test: ["CMD-SHELL", "curl -s -I http://heartbeat.${INT_NETWORK}:5066 | grep -q 'HTTP/1.1 200 OK'"]
      interval: 5s
      timeout: 5s
      retries: 500

#
# === Fleet ===
#
#   fleet:
#     depends_on:
#       kibana:
#         condition: service_healthy
#     depends_on:
#       logstash:
#         condition: service_healthy
#     # Ubuntu - fleet
#     image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
#     # image: docker.elastic.co/beats/elastic-agent-complete:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-fleet"
#     hostname: "fleet.${APP_HOST}.${INT_NETWORK}"
#     networks:
#       # for traefik:
#       - default
#       # local network:
#       - intnet
#     # ports:
#     #  - ${APM_PORT}:8200
#     #  - ${FLEET_PORT}:8220
#     user: root # note, synthetic browser monitors require this set to `elastic-agent`
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock:ro
#       - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
#       - /:/hostfs:ro
#       - ./certs:/usr/share/elastic-agent/certs
#       - ./extras/elastic-agent/elastic-agent.yml:/usr/share/elastic-agent/elastic-agent.yml
#       - ./extras/elastic-agent/apm-server.yml:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/apm-server-${STACK_VERSION}-linux-x86_64/apm-server.yml
#       - ./extras/elastic-agent/filebeat.yml:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/filebeat.yml
#       - ./extras/elastic-agent/metricbeat.yml:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/metricbeat-${STACK_VERSION}-linux-x86_64/metricbeat.yml
#       - ./logs/fleet:/usr/share/elastic-agent/state/data/logs
#       - ./logs/fleet/apm-server:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/apm-server-${STACK_VERSION}-linux-x86_64/logs
#       - ./logs/fleet/filebeat:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/logs
#       - ./logs/fleet/metricbeat:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/metricbeat-${STACK_VERSION}-linux-x86_64/logs
#       - ./logs/es01:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/es01
#       - ./logs/es02:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/es02
#       - ./logs/es03:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/es03
#       - ./logs/dokuwiki:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/nginx/dokuwiki
#       - ./logs/eps:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/eps
#       - ./logs/kibana:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/kibana
#       - ./logs/nginx:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/nginx/default
#       - /root/platypus-box/logs/traefik:/usr/share/elastic-agent/data/elastic-agent-${STV}/install/filebeat-${STACK_VERSION}-linux-x86_64/elogs/traefik
#       - fleet:/usr/share/elastic-agent
#     # https://www.elastic.co/guide/en/fleet/current/agent-environment-variables.html
#     # https://www.elastic.co/guide/en/fleet/current/secure-connections.html
#     # https://www.elastic.co/guide/en/fleet/current/elastic-agent-container.html
#     environment:
#       - APP_ID=${APP_ID}
#       - APP_HOST=${APP_HOST}
#       - APP_NET=${INT_NETWORK}
#       - CLUSTER_NAME=${CLUSTER_NAME}
#       - CLUSTER_UUID=${CLUSTER_UUID}
#       - AMP_SERVER_ENABLE=1
#       - ELASTIC_AGENT_TAGS=${ELASTIC_AGENT_TAGS}
#       - ELASTICSEARCH_HOSTS=https://es01.${APP_HOST}.${INT_NETWORK}:9200
#       - ELASTICSEARCH_USERNAME=elastic
#       - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
#       - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/elastic-agent/certs/ca/ca.crt
#       - ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt
#       - FLEET_CA=/usr/share/elastic-agent/certs/ca/ca.crt
#       - FLEET_URL=https://fleet.${APP_HOST}.${INT_NETWORK}:8220
#       - FLEET_ENROLL=1
#       - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN}
#       - FLEET_SERVER_ENABLE=1
#       - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01.${APP_HOST}.${INT_NETWORK}:9200
#       - FLEET_SERVER_ELASTICSEARCH_USERNAME=elastic
#       - FLEET_SERVER_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
#       - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt
#       - FLEET_SERVER_ELASTICSEARCH_REQUESTTIMEOUT=180000
#       - FLEET_SERVER_HOST=fleet.${APP_HOST}.${INT_NETWORK}
#       - FLEET_SERVER_CERT=/usr/share/elastic-agent/certs/fleet.${APP_HOST}.${INT_NETWORK}/fleet.${APP_HOST}.${INT_NETWORK}.crt
#       - FLEET_SERVER_CERT_KEY=/usr/share/elastic-agent/certs/fleet.${APP_HOST}.${INT_NETWORK}/fleet.${APP_HOST}.${INT_NETWORK}.key
#       - FLEET_SERVER_POLICY_ID=${FLEET_SERVER_POLICY_ID}
#       - FLEET_SERVER_SERVICE_TOKEN=${FLEET_SERVER_SERVICE_TOKEN}
#       - KIBANA_FLEET_USERNAME=elastic
#       - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
#       - KIBANA_FLEET_HOST=https://kibana.${APP_HOST}.${INT_NETWORK}:5601
#       - KIBANA_CA=/usr/share/elastic-agent/certs/ca/ca.crt
#       - KIBANA_FLEET_CA=/usr/share/elastic-agent/certs/ca/ca.crt
#       - KIBANA_FLEET_SETUP=1
#       - KIBANA_FLEET_REQUESTTIMEOUT=1200000
#       - STACK_VERSION=${STACK_VERSION}
#       - STV=${STV}
#     labels:
#       - "traefik.enable=true"
#       - "traefik.docker.network=${DOCKER_NETWORK}"
#       - "traefik.http.routers.fleet-public.rule=Host(`fleet.${APP_HOST}.${INT_NETWORK}`)"
#       - "traefik.http.routers.fleet-public.entrypoints=https"
#       - "traefik.http.routers.fleet-public.tls=true"
#       - "traefik.http.services.fleet-${APP_ID}.loadbalancer.server.port=8220"
#       - "traefik.http.services.fleet-${APP_ID}.loadbalancer.server.scheme=https"
#     healthcheck:
#       test: ["CMD-SHELL", "elastic-agent status | grep 'Status: HEALTHY'"]
#       interval: 5s
#       timeout: 5s
#       retries: 200
     
#   
# === Enterprisesearch ===
#
#   eps:
#     depends_on:
#       kibana:
#         condition: service_healthy
#     depends_on:
#       fleet:
#         condition: service_healthy
#     # Ubuntu - enterprisesearch
#     image: docker.elastic.co/enterprise-search/enterprise-search:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-eps"
#     hostname: "eps.${INT_NETWORK}"
#     networks:
#       # local network:
#       - intnet
#     # ports:
#     #  - ${ENTERPRISE_SEARCH_PORT}:3002
#     volumes:
#       - ./certs:/usr/share/enterprise-search/config/certs:ro
#       - ./extras/enterprise-search/enterprise-search.yml:/usr/share/enterprise-search/config/enterprise-search.yml:ro
#       - ./logs/eps:/var/log/enterprise-search:rw
#       - epsdata:/usr/share/enterprise-search
#     environment:
#       - APP_ID=${APP_ID}
#       - APP_HOST=${APP_HOST}
#       - APP_NET=${INT_NETWORK}
#       - CLUSTER_NAME=${CLUSTER_NAME}
#       - CLUSTER_UUID=${CLUSTER_UUID}
#       - ELASTIC_USERNAME=elastic
#       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#       - ELASTICSEARCH_HOSTS=https://es01.${APP_HOST}.${INT_NETWORK}:9200
#       - ELASTIC_SSL_CERTIFICATEAUTHORITIES=/usr/share/enterprise-search/config/certs/ca/ca.crt
#       - JAVA_OPTS=${EPS_JAVA_OPTS}
#       - APP_SERVER_JAVA_OPTS=${EPS_APP_JAVA_OPTS}
#       - JAVA_GC_LOGGING=false
#       - secret_management.encryption_keys=[${ENCRYPTION_KEYS}]
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test: ["CMD-SHELL", "curl -s -I http://eps.${INT_NETWORK}:3002 | grep -q 'HTTP/1.1 302 Found'"]
#       interval: 5s
#       timeout: 5s
#       retries: 500
   
#
# Status and configurations of docker-cloud without using Kibana - Web console for REST.
#
  cerebro:
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      es02:
        condition: service_healthy
    # Debian - Cerebro
    image: lmenezes/cerebro:latest
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-cerebro"
    hostname: "cerebro.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    # ports:
    #  - 9000:9000
    volumes:
      - ./certs:/opt/cerebro/conf/certs:ro
      - ./extras/cerebro/application.conf:/opt/cerebro/conf/application.conf
      - ./extras/cerebro/logback.xml:/opt/cerebro/conf/logback.xml
      - ./logs/cerebro:/opt/cerebro/logs:rw
    environment:
      - BASIC_AUTH_USER=elastic
      - BASIC_AUTH_PWD=${ELASTIC_PASSWORD}
      - CEREBRO_PORT=9000
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CERTIFICATEAUTHORITY=/opt/cerebro/conf/certs/ca/ca.crt
      - CEREBRO_SERVER_CERT=/opt/cerebro/conf/certs/${CEREBRO_CERTNAME}.crt
      - CEREBRO_SERVER_CERT_KEY=/opt/cerebro/conf/certs/${CEREBRO_CERTNAME}.key
      - ES_URL=https://es01.${APP_HOST}.${INT_NETWORK}:9200
      - JAVA_OPTS=${CEREBRO_JAVA_OPTS}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.cerebro-public.rule=Host(`cerebro.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.cerebro-public.entrypoints=https"
      - "traefik.http.routers.cerebro-public.tls=true"
      - "traefik.http.services.cerebro-${APP_ID}.loadbalancer.server.port=9000"
      - "traefik.http.services.cerebro-${APP_ID}.loadbalancer.server.scheme=http"
  
  weblhs:
    depends_on:
      setup:
        condition: service_healthy
    # Alpine Linux
    # lhsradek/lhsdock has openssl, perl and the program platypus.pl for certificates,
    # which I don't use much anymore, 'cause the Elastic Certificate Tool is used by webservice 'setup'.
    # build:
    #   context: ./context
    #   dockerfile: Dockerfile 
    # image: lhsradek/lhsdock:v3
    image: nginx:alpine
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-web"
    hostname: "${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - 4443:443
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - TZ=${TIME_ZONE}
    volumes:
      - ./extras/nginx/default-https.conf:/etc/nginx/conf.d/default.conf:ro
      - ./extras/nginx/htpasswd:/etc/nginx/conf.d/htpasswd:ro
      - ./certs/ca/ca.crt:/etc/ssl/private/ca.crt:ro
      - ./certs/${CERTNAME}.crt:/etc/ssl/private/cacert.crt
      - ./certs/${CERTNAME}.key:/etc/ssl/private/cacert.key
      # The first mount add bash and ping to nginx:alpine - lhsradek/lhsdock this dont'n need, see:
      # https://github.com/lhsradek/platypus-lhsdock/blob/main/context/Dockerfile of lhsradek/lhsdock:v3
      - ./context/root/bin/alpine/add.sh:/docker-entrypoint.d/05-add-packages.sh 
      - ./application/html:/var/www/html:ro
      - ./logs/nginx:/var/log/nginx
      - esdata01:/root/bin/volume/es01:ro
      - esdata02:/root/bin/volume/es02:ro
      - esdata03:/root/bin/volume/es03:ro
      - logstash:/root/bin/volume/logstash:ro
      - epsdata:/root/bin/volume/eps:ro
      - fleet:/root/bin/volume/fleet:ro
      - heartbeat:/root/bin/volume/heartbeat:ro
      - kibana:/root/bin/volume/kibana:ro
      # It's for my prune volume deletion protection:
      - wordpresswp99:/root/bin/volume/wordpress-wp-99:ro
      - wordpressdb99:/root/bin/volume/wordpress-db-99:ro
      - wordpresspma99:/root/bin/volume/wordpress-pma-99:ro
      - wordpressredis99:/root/bin/volume/wordpress-redis-99:ro
      - wordpressfleet99:/root/bin/volume/wordpress-fleet-99:ro
      - tomboladb:/root/bin/volume/tombola-db:ro
      - tombolafleet:/root/bin/volume/tombola-fleet:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.weblhs-public.rule=Host(`${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.weblhs-public.entrypoints=https"
      - "traefik.http.routers.weblhs-public.tls=true"
      - "traefik.http.services.weblhs-${APP_ID}.loadbalancer.server.port=443"
      - "traefik.http.services.weblhs-${APP_ID}.loadbalancer.server.scheme=https"
    healthcheck:
      test: "curl -s --cacert /etc/ssl/private/ca.crt -I https://docker.nginx.local/downloads | grep -q 'HTTP/2 301'"
      interval: 5s
      timeout: 5s
      retries: 150
 
  weblhs-php:
    depends_on:
      setup:
        condition: service_healthy
    # Alpine Linux
    # image: php:fpm-alpine
    image: lhsradek/fpm:v1
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-php"
    hostname: "weblhs-php.${INT_NETWORK}"
    networks:
      # for elastic and traefik in application/html/index.php
      - default
      # local network:
      - intnet
    environment:
      - APP_ID=${APP_ID}
      - APP_HOST=${APP_HOST}
      - APP_NET=${INT_NETWORK}
      - CLUSTER_NAME=${CLUSTER_NAME}
      - CLUSTER_UUID=${CLUSTER_UUID}
      - ELASTIC_APM_ENVIRONMENT=${STAGE}
      - ELASTIC_APM_HOSTNAME=weblhs-php.${INT_NETWORK}
      - ELASTIC_APM_API_KEY=${ELASTIC_APM_API_KEY}
      - ELASTIC_APM_SERVER_URL=http://fleet.${APP_HOST}.${INT_NETWORK}:8200
      - ELASTIC_APM_SERVICE_NAME=${APP_HOST}-${APP_ID}
      - ELASTIC_APM_SERVICE_NODE_NAME=${APP_HOST}.${INT_NETWORK}
      - PUID=1000
      - PGID=1000
      - TZ=${TIME_ZONE}
    volumes:
      - ./extras/php/phpSettings.conf:/usr/local/etc/php-fpm.d/zzz-phpSettings.conf
      - ./application/html:/var/www/html:ro
      - ./logs/nginx/php-error.log:/var/log/error.log
      - ./logs/nginx/php-access.log:/var/log/access.log
 
  weblhs-wiki:
    # Alpine Linux
    depends_on:
      weblhs:
        condition: service_healthy
    image: lscr.io/linuxserver/dokuwiki:latest
    container_name: dokuwiki
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-wiki"
    hostname: "wiki.${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
    environment:
      - DOKUWIKI_PASSWORD=${ELASTIC_PASSWORD}
      - PUID=1000
      - PGID=1000
      - TZ=${TIME_ZONE}
    volumes:
      # The first mount add bash and ping to nginx:alpine
      - ./context/root/bin/alpine/add.sh:/etc/cont-init.d/05-add-packages.sh 
      - ./certs/ca/ca.crt:/config/keys/ca.pem:ro
      - ./certs/${WIKI_CERTNAME}.crt:/config/keys/cert.crt
      - ./certs/${WIKI_CERTNAME}.key:/config/keys/cert.key
      - ./extras/dokuwiki/config:/config
      - ./png/cerebro01.png:/config/dokuwiki/data/media/cerebro01.png
      - ./png/cerebro02.png:/config/dokuwiki/data/media/cerebro02.png
      - ./png/cerebro03.png:/config/dokuwiki/data/media/cerebro03.png
      - ./png/elastic-apm-php.png:/config/dokuwiki/data/media/elastic-apm-php.png
      - ./png/fleet01.png:/config/dokuwiki/data/media/fleet01.png
      - ./png/fleet02.png:/config/dokuwiki/data/media/fleet02.png
      - ./png/fleet03.png:/config/dokuwiki/data/media/fleet03.png
      - ./png/fleet04.png:/config/dokuwiki/data/media/fleet04.png
      - ./png/kibana01.png:/config/dokuwiki/data/media/kibana01.png
      - ./png/kibana02.png:/config/dokuwiki/data/media/kibana02.png
      - ./png/kibana03.png:/config/dokuwiki/data/media/kibana03.png
      - ./png/kibana04.png:/config/dokuwiki/data/media/kibana04.png
      - ./png/kibana05.png:/config/dokuwiki/data/media/kibana05.png
      - ./png/kibana06.png:/config/dokuwiki/data/media/kibana06.png
      - ./png/kibana07.png:/config/dokuwiki/data/media/kibana07.png
      - ./png/kibana08.png:/config/dokuwiki/data/media/kibana08.png
      - ./png/kibana09.png:/config/dokuwiki/data/media/kibana09.png
      - ./png/kibana10.png:/config/dokuwiki/data/media/kibana10.png
      - ./png/kibana11.png:/config/dokuwiki/data/media/kibana11.png
      - ./png/kibana12.png:/config/dokuwiki/data/media/kibana12.png
      - ./png/kibana13.png:/config/dokuwiki/data/media/kibana13.png
      - ./png/kibana14.png:/config/dokuwiki/data/media/kibana14.png
      - ./png/lhsdock.png:/config/dokuwiki/data/media/lhsdock.png
      - ./png/manager.png:/config/dokuwiki/data/media/manager.png
      - ./png/tomcat.png:/config/dokuwiki/data/media/tomcat.png
      - ./png/traefik01.png:/config/dokuwiki/data/media/traefik01.png
      - ./png/wiki.png:/config/dokuwiki/data/media/wiki.png
      - ./logs/dokuwiki:/config/log
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.weblhs-wiki-public.rule=Host(`wiki.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.weblhs-wiki-public.entrypoints=https"
      - "traefik.http.routers.weblhs-wiki-public.tls=true"
      - "traefik.http.services.weblhs-wiki-${APP_ID}.loadbalancer.server.port=443"
      - "traefik.http.services.weblhs-wiki-${APP_ID}.loadbalancer.server.scheme=https"

#
# setup makes certs and change passwords
#
  setup:
    # Ubuntu - elasticsearch
    # see https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: "${APP_ID}-setup"
    hostname: "setup.${INT_NETWORK}"
    networks:
      - intnet
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          if [ ! -f config/certs/ca.zip ]; then
            bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          fi;
          unzip -n config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: ${APP_HOST}.traefik.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - ${APP_HOST}.traefik.local\n"\
          "  - name: www.traefik.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - www.traefik.local\n"\
          "  - name: ${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - ${APP_ID}-${APP_HOST}.${INT_NETWORK}\n"\
          "      - ${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: www.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - ${APP_ID}-www.${INT_NETWORK}\n"\
          "      - www.${INT_NETWORK}\n"\
          "  - name: apm.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - apm.${APP_HOST}.${INT_NETWORK}\n"\
          "      - ${APP_ID}-apm.${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: cerebro.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - cerebro\n"\
          "      - cerebro.${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: es01.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - es01\n"\
          "      - ${APP_ID}-es01\n"\
          "      - ${APP_ID}-es01.${APP_HOST}.${INT_NETWORK}\n"\
          "      - es01.${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: es02.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - es02\n"\
          "      - ${APP_ID}-es02\n"\
          "      - ${APP_ID}-es02.${APP_HOST}.${INT_NETWORK}\n"\
          "      - es02.${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: es03.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - es03\n"\
          "      - ${APP_ID}-es03\n"\
          "      - ${APP_ID}-es03.${APP_HOST}.${INT_NETWORK}\n"\
          "      - es03.${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: eps.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - eps\n"\
          "      - ${APP_ID}-eps\n"\
          "      - ${APP_ID}-eps.${INT_NETWORK}\n"\
          "      - eps.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: fleet.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - fleet\n"\
          "      - ${APP_ID}-fleet\n"\
          "      - ${APP_ID}-fleet.${APP_HOST}.${INT_NETWORK}\n"\
          "      - fleet.${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: heartbeat.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - heartbeat\n"\
          "      - ${APP_ID}-heartbeat\n"\
          "      - ${APP_ID}-heartbeat.${INT_NETWORK}\n"\
          "      - heartbeat.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: kibana.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - kibana\n"\
          "      - ${APP_ID}-kibana\n"\
          "      - ${APP_ID}-kibana.${APP_HOST}.${INT_NETWORK}\n"\
          "      - kibana.${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: logstash.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - logstash\n"\
          "      - ${APP_ID}-logstash\n"\
          "      - ${APP_ID}-logstash.${APP_HOST}.${INT_NETWORK}\n"\
          "      - logstash.${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: wiki.${APP_HOST}.${INT_NETWORK}\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - wiki\n"\
          "      - wiki.${APP_HOST}.${INT_NETWORK}\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: ${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - ${APP_HOST}.tomcat.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: www.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - www.tomcat.local\n"\
          "  - name: tombola.${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - tombola.${APP_HOST}.tomcat.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: tombola.www.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - tombola.www.tomcat.local\n"\
          "  - name: ad.${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - ad.${APP_HOST}.tomcat.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: ad.www.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - ad.www.tomcat.local\n"\
          "  - name: db.${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - db.${APP_HOST}.tomcat.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: db.www.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - db.www.tomcat.local\n"\
          "  - name: fleet.${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - fleet.${APP_HOST}.tomcat.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: apm.${APP_HOST}.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - apm.${APP_HOST}.tomcat.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: fleet.www.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - fleet.www.tomcat.local\n"\
          "  - name: apm.www.tomcat.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - apm.www.tomcat.local\n"\
          "  - name: ${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - ${APP_HOST}.wordpress.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: www.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - www.wordpress.local\n"\
          "  - name: wp.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - wp.${APP_HOST}.wordpress.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: wp.www.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - wp.www.wordpress.local\n"\
          "  - name: wpa.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - wpa.${APP_HOST}.wordpress.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: wpa.www.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - wpa.www.wordpress.local\n"\
          "  - name: pma.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - pma.${APP_HOST}.wordpress.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: pma.www.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - pma.www.wordpress.local\n"\
          "  - name: db.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - db.${APP_HOST}.wordpress.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: db.www.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - db.www.wordpress.local\n"\
          "  - name: fleet.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - fleet.${APP_HOST}.wordpress.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: apm.${APP_HOST}.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - apm.${APP_HOST}.wordpress.local\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - ${ES_IP}\n"\
          "  - name: fleet.www.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - fleet.www.wordpress.local\n"\
          "  - name: apm.www.wordpress.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - apm.www.wordpress.local\n"\
          "  - name: www.intranet.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - www.intranet.local\n"\
          "  - name: lhs.intranet.local\n"\
          "    dns:\n"\
          "      - localhost\n"\
          "      - lhs.intranet.local\n"\
          > config/certs/instances.yml;
          if [ ! -f config/certs/certs.zip ]; then
            bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          fi;
          unzip -n config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        # find . -type d -exec chmod 750 \{\} \;;
        find . -type d -exec chmod 755 \{\} \;; # logstash
        find . -type f -exec chmod 640 \{\} \;;
        find . -type f -name ca.crt -exec chmod 644 \{\} \;; # logstash
        find . -type f -name logstash.docker.nginx.local.crt -exec chmod 644 \{\} \;; # logstash
        find . -type f -name logstash.docker.nginx.local.key -exec chmod 644 \{\} \;; # logstash
        find . -type f -name cerebro.docker.nginx.local.crt -exec chmod 644 \{\} \;; # cerebro
        find . -type f -name cerebro.docker.nginx.local.key -exec chmod 644 \{\} \;; # cerebro
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01.${APP_HOST}.${INT_NETWORK}:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        #
        # create role Stack Management > Roles standalone_agent https://www.elastic.co/guide/en/fleet/master/grant-access-to-elasticsearch.html        
        # <code>
        #   {
        #     "standalone_agent": {
        #       "cluster": ["monitor"],
        #       "indices": [
        #         {
        #           "names": ["logs-*-*", "metrics-*-*", "traces-*-*", "synthetics-*-*"],
        #           "privileges": ["auto_configure", "create_doc"]
        #         }
        #       ]
        #     }
        #   }
        # </code>
        #
        # echo "Setting apm_system password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/apm_system/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting fleet-server password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/fleet-server/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # 
        # echo "Setting beats_system password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/beats_system/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting remote_monitoring_user password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/remote_monitoring_user/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        # echo "Setting logstash_system password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/logstash_system/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        #
        # echo "Setting logstash_writer password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/logstash_writer/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        #
        # echo "Setting enterprise_search password";
        # until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01.${APP_HOST}.${INT_NETWORK}:9200/_security/user/enterprise_search/_password -d "{\"password\":\"${EPS_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01.${APP_HOST}.${INT_NETWORK}/es01.${APP_HOST}.${INT_NETWORK}.crt ]"]
      interval: 5s
      timeout: 5s
      retries: 120
# use:
# find . -name *.crt -exec bash -c 'openssl x509 -in {} -out ${1%.crt}.pem' - {} \;;
#
# It's all my devel certs. My ${INT_NETWORK} is 'nginx.logal' (see https://github.com/lhsradek/platypus-lhsdock/blob/main/.env.dist)
#
volumes:
  esdata01:
    external: true
    name: "${APP_ID}-es01"
  esdata02:
    external: true
    name: "${APP_ID}-es02"
  esdata03:
    external: true
    name: "${APP_ID}-es03"
  epsdata:
    external: true
    name: "${APP_ID}-eps"
  fleet:
    external: true
    name: "${APP_ID}-fleet"
  heartbeat:
    external: true
    name: "${APP_ID}-heartbeat"
  kibana:
    external: true
    name: "${APP_ID}-kibana"
  logstash:
    external: true
    name: "${APP_ID}-logstash"
#    
# You can remove this. It's for my prune volume deletion protection:
#
  wordpressdb99:
    external: true
    name: wordpress-db-99
  wordpresspma99:
    external: true
    name: wordpress-pma-99
  wordpressredis99:
    external: true
    name: wordpress-redis-99
  wordpressfleet99:
    external: true
    name: wordpress-fleet-99
  wordpresswp99:
    external: true
    name: wordpress-wp-99
  tomboladb:
    external: true
    name: tombola-db
  tombolafleet:
    external: true
    name: tombola-fleet
