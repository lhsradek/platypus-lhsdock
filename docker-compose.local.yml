version: '3.9'

networks:
  default:
    external: true
    name: ${DOCKER_NETWORK}
  intnet:
    external: false
    name: ${INT_NETWORK}

services:
  # Alpine Linux
  weblhs:
    # build:
    #   context: ./context
    #   dockerfile: Dockerfile 
    # image: lhsradek/lhsdock:v3
    image: nginx:alpine
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}"
    hostname: "${APP_HOST}.${INT_NETWORK}"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    # ports:
    # - 80:80
    # - 443:443
    volumes:
      # if http
      - ./extras/nginx/default-http.conf:/etc/nginx/conf.d/default.conf:ro
      # else if https
      # - ./extras/nginx/default-https.conf:/etc/nginx/conf.d/default.conf:ro
      # - ./certs/${CERTNAME}.pem:/etc/ssl/private/cacert.pem:ro
      # - ./certs/${CERTNAME}.key:/etc/ssl/private/cacert-key.pem:ro
      # fi
      - ./application/html:/var/www/html:ro
      - ./logs:/var/log/nginx
      - esdata01:/root/bin/volume/es01:ro
      # - esdata02:/root/bin/volume/es02:ro
      - kibanadata:/root/bin/volume/kibana:ro
      - logstashdata:/root/bin/volume/logstash:ro
      - enterprisesearchdata:/root/bin/volume/eps:ro
      - fleetdata:/root/bin/volume/fleet:ro
      - apmdata:/root/bin/volume/apm:ro
      - filedata:/root/bin/volume/file:ro
      - heartdata:/root/bin/volume/heart:ro
      - metricdata:/root/bin/volume/metric:ro
      - wordpressbedrockdb:/root/bin/volume/bedrock-db:ro
      - wordpresswp99:/root/bin/volume/wordpress-wp-99:ro
      - wordpressdb99:/root/bin/volume/wordpress-db-99:ro
      - wordpresspma99:/root/bin/volume/wordpress-pma-99:ro
      - wordpressredis99:/root/bin/volume/wordpress-redis-99:ro
      - tomboladb:/root/bin/volume/tombola-db:ro
      # - certs:/root/bin/volume/certs:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.weblhs-public.rule=Host(`${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.weblhs-public.entrypoints=https"
      - "traefik.http.routers.weblhs-public.tls=true"
      # if https
      # - "traefik.http.services.weblhs-platypus-${APP_ID}.loadbalancer.server.port=443"
      # - "traefik.http.services.weblhs-platypus-${APP_ID}.loadbalancer.server.scheme=https"

  weblhs-php:
    # Alpine Linux
    image: php:fpm-alpine
    # image: lhsradek/fpm:v1
    restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-php"
    hostname: "weblhs-php"
    networks:
      # local network:
      - intnet
    volumes:
      - ./application/html:/var/www/html:ro

  setup: # setup makes certs and change password
    # Ubuntu - elasticsearch
    # see https://www.elastic.co/guide/en/elasticsearch/reference/8.4/docker.html
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    # restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-setup"
    hostname: "setup"
    networks:
      # local network:
      - intnet
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          if [ ! -f config/certs/ca.zip ]; then
            bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          fi;
          unzip -n config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - es01.${APP_HOST}.${INT_NETWORK}\n"\
          "      - es01.${APP_HOST}.traefik.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.100.248\n"\
          "      - 192.168.122.20\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - es02.${APP_HOST}.${INT_NETWORK}\n"\
          "      - es02.${APP_HOST}.traefik.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.100.252\n"\
          "      - 192.168.122.20\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - es03.${APP_HOST}.${INT_NETWORK}\n"\
          "      - es03.${APP_HOST}.traefik.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.100.132\n"\
          "      - 192.168.122.20\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - kibana.${APP_HOST}.${INT_NETWORK}\n"\
          "      - kibana.${APP_HOST}.traefik.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: eps\n"\
          "    dns:\n"\
          "      - eps\n"\
          "      - eps.${APP_HOST}.${INT_NETWORK}\n"\
          "      - eps.${APP_HOST}.traefik.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: log\n"\
          "    dns:\n"\
          "      - log\n"\
          "      - log.${APP_HOST}.${INT_NETWORK}\n"\
          "      - log.${APP_HOST}.traefik.local\n"\
          "      - log.${APP_HOST}.intranet.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: file\n"\
          "    dns:\n"\
          "      - file\n"\
          "      - file.${APP_HOST}.${INT_NETWORK}\n"\
          "      - file.${APP_HOST}.traefik.local\n"\
          "      - file.${APP_HOST}.intranet.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: metric\n"\
          "    dns:\n"\
          "      - metric\n"\
          "      - metric.${APP_HOST}.${INT_NETWORK}\n"\
          "      - metric.${APP_HOST}.traefik.local\n"\
          "      - metric.${APP_HOST}.intranet.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: heart\n"\
          "    dns:\n"\
          "      - heart\n"\
          "      - heart.${APP_HOST}.${INT_NETWORK}\n"\
          "      - heart.${APP_HOST}.traefik.local\n"\
          "      - heart.${APP_HOST}.intranet.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: apm\n"\
          "    dns:\n"\
          "      - apm\n"\
          "      - apm.${APP_HOST}.${INT_NETWORK}\n"\
          "      - apm.${APP_HOST}.traefik.local\n"\
          "      - apm.${APP_HOST}.intranet.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: fleet\n"\
          "    dns:\n"\
          "      - fleet\n"\
          "      - fleet.${APP_HOST}.${INT_NETWORK}\n"\
          "      - fleet.${APP_HOST}.traefik.local\n"\
          "      - fleet.${APP_HOST}.intranet.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          "  - name: ${APP_HOST}\n"\
          "    dns:\n"\
          "      - ${APP_HOST}\n"\
          "      - ${APP_HOST}.${INT_NETWORK}\n"\
          "      - ${APP_HOST}.traefik.local\n"\
          "      - ${APP_HOST}.wordpress.local\n"\
          "      - wp.${APP_HOST}.wordpress.local\n"\
          "      - wpa.${APP_HOST}.wordpress.local\n"\
          "      - pma.${APP_HOST}.wordpress.local\n"\
          "      - ${APP_HOST}.tomcat.local\n"\
          "      - web.${APP_HOST}.tomcat.local\n"\
          "      - ad.${APP_HOST}.tomcat.local\n"\
          "      - ${APP_HOST}.intranet.local\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "      - 192.168.122.20\n"\
          > config/certs/instances.yml;
          if [ ! -f config/certs/certs.zip ]; then
            bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          fi;
          unzip -n config/certs/certs.zip -d config/certs;
        fi;
          echo "Setting file permissions"
        chown -R root:root config/certs;
        # find . -type d -exec chmod 750 \{\} \;;
        find . -type d -exec chmod 755 \{\} \;; # for logstash 755
        find . -type f -exec chmod 640 \{\} \;;
        find . -type f -name ca.crt -exec chmod 644 \{\} \;; # for logstash
        find . -type f -name log.crt -exec chmod 644 \{\} \;; # for logstash
        find . -type f -name log.key -exec chmod 644 \{\} \;; # for logstash
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "Setting logstash_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/logstash_system/_password -d "{\"password\":\"${LOGSTASH_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "Setting apm_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/apm_system/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "Setting beats_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/beats_system/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "Setting remote_monitoring_user password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/remote_monitoring_user/_password -d "{\"password\":\"${ELASTIC_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "Setting fleet_server password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/fleet_server/_password -d "{\"password\":\"${APM_PASSWORD}\"}" | grep -q "^{}"; do sleep 5; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
#
# Tree for certs, *.pem (for traefik and nginx) created by:
# find . -name *.crt -exec bash -c 'openssl x509 -in {} -out ${1%.crt}.pem' - {} \;;
#
# ├── ca
# │   ├── ca.crt
# │   ├── ca.key
# │   └── ca.pem
# ├── www (docker host)
# │   ├── www.crt
# │   ├── www.key
# │   └── www.pem
# ├── apm (apm-server)
# │   ├── apm.crt
# │   ├── apm.key
# │   └── apm.pem
# ├── eps (enterprisesearch)
# │   ├── eps.crt
# │   ├── eps.key
# │   └── eps.pem
# ├── es01 (elasticsearch 01)
# │   ├── es01.crt
# │   ├── es01.key
# │   └── es01.pem
# ├── es02 (elasticsearch 02)
# │   ├── es02.crt
# │   ├── es02.key
# │   └── es02.pem
# ├── es03 (elasticsearch 03 - reserved)
# │   ├── es03.crt
# │   ├── es03.key
# │   └── es03.pem
# ├── file (filebeat)
# │   ├── file.crt
# │   ├── file.key
# │   └── file.pem
# ├── fleet
# │   ├── fleet.crt
# │   ├── fleet.key
# │   └── fleet.pem
# ├── heart (heartbeat)
# │   ├── heart.crt
# │   ├── heart.key
# │   └── heart.pem
# ├── kibana
# │   ├── kibana.crt
# │   ├── kibana.key
# │   └── kibana.pem
# ├── log (logstash)
# │   ├── log.crt
# │   ├── log.key
# │   └── log.pem
# ├── metric (metricbeat)
# │   ├── metric.crt
# │   ├── metric.key
# │   └── metric.pem
# ├── ca.zip
# ├── certs.zip
# └── instances.yml

  es01:
    # Ubuntu - elasticsearch
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    # restart: ${DOCKER_RESTART_POLICY}
    container_name: "${APP_ID}-es01"
    hostname: "es01"
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${ES_PORT}:9200
      - 9300:9300
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs:ro
      - esdata01:/usr/share/elasticsearch/data
    environment:
      - node.name=es01
      # - node.roles=[master, data]
      - transport.port=9300
      - http.host=0.0.0.0
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      # - cluster.initial_master_nodes=es01,es02
      # - discovery.seed_hosts=es01:9301
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es01-public.rule=Host(`es01.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es01-public.entrypoints=https"
      - "traefik.http.routers.es01-public.tls=true"
      # - "traefik.http.routers.es01-public.middlewares=es01-platypus-${APP_ID}@docker"
      # - "traefik.http.middlewares.es01-platypus-${APP_ID}.redirectscheme.scheme=https"
      # - "traefik.http.middlewares.es01-platypus-${APP_ID}.redirectscheme.port=9200"
      - "traefik.http.services.es01-platypus-${APP_ID}.loadbalancer.server.port=9200"
      - "traefik.http.services.es01-platypus-${APP_ID}.loadbalancer.server.scheme=https"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 500

  kibana:
    # Ubuntu - kibana 
    depends_on:
      es01:
        condition: service_healthy
    # depends_on:
    #   es02:
    #   condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - ${KIBANA_PORT}:5601
    container_name: "${APP_ID}-kibana"
    hostname: "kibana.${APP_HOST}.${INT_NETWORK}"
    volumes:
      - ./certs:/usr/share/kibana/config/certs:ro
      - ./extras/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - kibanadata:/usr/share/kibana/data
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca/ca.crt
      - ENTERPRISESEARCH_HOST=http://eps:3002
      - XPACK_SECURITY_ENABLED=true
      - XPACK_MONITORING_ENABLED=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/kibana/kibana.key
      - xpack.security.http.ssl.certificate=certs/kibana/kibana.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/kibana/kibana.key
      - xpack.security.transport.ssl.certificate=certs/kibana/kibana.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      # - xpack.security.transport.ssl.verification_mode=certificate
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.kibana-public.rule=Host(`kibana.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.kibana-public.entrypoints=https"
      - "traefik.http.routers.kibana-public.tls=true"
      - "traefik.http.services.kibana-platypus-${APP_ID}.loadbalancer.server.port=5601"
      - "traefik.http.services.kibana-platypus-${APP_ID}.loadbalancer.server.scheme=https"
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt -I https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 500

  elastic-agent:
    # Ubuntu - fleet
    depends_on:
      es01:
        condition: service_healthy
    depends_on:
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    restart: ${DOCKER_RESTART_POLICY}
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    ports:
      - 8220:8220
    container_name: "elastic-agent"
    # !!! not set this hostname: "elastic-agent"
    restart: always
    user: root # note, synthetic browser monitors require this set to `elastic-agent`
    # user: elastic-agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/usr/share/elastic-agent/certs:ro
      - ./extras/elastic-agent/elastic-agent.yml:/usr/share/elastic-agent/elastic-agent.yml:ro
      - fleetdata:/usr/share/elastic-agent/data
    environment:
      - FLEET_ENROLL=1
      - FLEET_URL=http://elastic-agent
      - FLEET_SERVER_ENABLE=true
      - FLEET_SERVER_ELASTICSEARCH_HOST=https://es01
      - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/certs/ca/ca.crt
      - FLEET_SERVER_SERVICE_TOKEN=${FLEET_SERVER_SERVICE_TOKEN}
      # - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN}
      - KIBANA_FLEET_HOST=https://kibana:5601
    #   - xpack.security.enabled=true
    #   - xpack.security.http.ssl.enabled=true
    #   - xpack.security.http.ssl.key=certs/apm/apm.key
    #   - xpack.security.http.ssl.certificate=certs/apm/apm.crt
    #   - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
    #   - xpack.security.http.ssl.verification_mode=certificate
    #   - xpack.security.transport.ssl.enabled=true
    #   - xpack.security.transport.ssl.key=certs/kibana/fleet.key
    #   - xpack.security.transport.ssl.certificate=certs/fleet/fleet.crt
    #   - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
    #   - xpack.security.transport.ssl.verification_mode=certificate
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.docker.network=${DOCKER_NETWORK}"
    #   - "traefik.http.routers.elastic-agent-public.rule=Host(`elastic-agent.${APP_HOST}.${INT_NETWORK}`)"
    #   - "traefik.http.routers.elastic-agent-public.entrypoints=https"
    #   - "traefik.http.routers.elastic-agent-public.tls=true"
    #   - "traefik.http.services.elastic-agent-platypus-${APP_ID}.loadbalancer.server.port=8220"
 
#   log:
#     # Ubuntu - logstash 
#     depends_on:
#       es01:
#         condition: service_healthy
#     depends_on:
#       kibana:
#         condition: service_healthy
#     image: logstash:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-log"
#     hostname: "log"
#     networks:
#       # for traefik:
#       - default
#       # local network:
#       - intnet
#     ports:
#       - 5044:5044
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - ./certs:/usr/share/logstash/config/certs:ro
#       - ./extras/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:rw
#       - logstashdata:/usr/share/logstash/data
#     environment:
#       - elasticsearch.username=elastic
#       - elasticsearch.password=${ELASTIC_PASSWORD}
#       - elasticsearch.ssl.enabled=true
#       - elasticsearch.ssl.certificate_authorities=certs/ca/ca.crt
#       - elasticsearch.ssl.certificate=certs/log/log.crt
#       - elasticsearch.ssl.key=certs/log/log.key
#     # labels:
#     #   - "traefik.enable=true"
#     #   - "traefik.docker.network=${DOCKER_NETWORK}"
#     #   - "traefik.http.routers.log-public.rule=Host(`log.${APP_HOST}.${INT_NETWORK}`)"
#     #   - "traefik.http.routers.log-public.entrypoints=https"
#     #   - "traefik.http.routers.log-public.tls=true"
#     #   - "traefik.http.services.log-platypus-${APP_ID}.loadbalancer.server.port=5044"
#     #   - "traefik.http.services.log-platypus-${APP_ID}.loadbalancer.server.scheme=https"

#   apm-server:
#     depends_on:
#       es01:
#         condition: service_healthy
#     depends_on:
#       es02:
#         condition: service_healthy
#     depends_on:
#       kibana:
#         condition: service_healthy
#     image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-apm"
#     hostname: "apm"
#     networks:
#       # for traefik:
#       - default
#       # local network:
#       - intnet
#     # ports:
#     #  - 8200:8200
#     volumes:
#       # - /var/run/docker.sock:/var/run/docker.sock
#       - ./certs:/usr/share/apm-server/certs:ro
#       - ./extras/apm-server/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro
#       - apmdata:/usr/share/apm-server/data
#     environment:
#       - elasticsearch.host=https://es01:9200
#       - elasticsearch.username=elastic
#       - elasticsearch.password=${ELASTIC_PASSWORD}
#       - elasticsearch.ssl.enabled=true
#       - elasticsearch.ssl.certificate_authorities=/usr/share/apm-server/certs/ca/ca.crt
#       - elasticsearch.ssl.certificate=/usr/share/apm-server/certs/apm/apm.crt
#       - elasticsearch.ssl.key=/usr/share/apm-server/certs/apm/apm.key
#       # - xpack.security.enabled=true
#       # - xpack.security.http.ssl.enabled=true
#       # - xpack.security.http.ssl.key=certs/apm/apm.key
#       # - xpack.security.http.ssl.certificate=certs/apm/apm.crt
#       # - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       # - xpack.security.http.ssl.verification_mode=certificate
#       # - xpack.security.transport.ssl.enabled=true
#       # - xpack.security.transport.ssl.key=certs/apm/apm.key
#       # - xpack.security.transport.ssl.certificate=certs/apm/apm.crt
#       # - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       # - xpack.security.transport.ssl.verification_mode=certificate
#    #  labels:
#    #    - "traefik.enable=true"
#    #    - "traefik.docker.network=${DOCKER_NETWORK}"
#    #    - "traefik.http.routers.apm-public.rule=Host(`apm.${APP_HOST}.${INT_NETWORK}`)"
#    #    - "traefik.http.routers.apm-public.entrypoints=https"
#    #    - "traefik.http.routers.apm-public.tls=true"
#    #    - "traefik.http.services.apm-platypus-${APP_ID}.loadbalancer.server.port=8200"
#    #   - "traefik.http.services.apm-platypus-${APP_ID}.loadbalancer.server.scheme=http"
   
#   eps:
#     # Ubuntu - enterprisesearch
#     depends_on:
#       es01:
#         condition: service_healthy
#     # depends_on:
#     #   es02:
#     #     condition: service_healthy
#     depends_on:
#       kibana:
#         condition: service_healthy
#     image: docker.elastic.co/enterprise-search/enterprise-search:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-eps"
#     hostname: "eps"
#     networks:
#       # for traefik:
#       - default
#       # local network:
#       - intnet
#     ports:
#       - ${ENTERPRISE_SEARCH_PORT}:3002
#     volumes:
#       - ./certs:/usr/share/enterprise-search/config/certs:ro
#       - ./extras/enterprise-search/enterprise-search.yml:/usr/share/enterprise-search/config/enterprise-search.yml:ro
#       - enterprisesearchdata:/usr/share/enterprise-search/data
#     environment:
#       - SERVERNAME=eps
#       - secret_management.encryption_keys=[${ENCRYPTION_KEYS}]
#       - allow_es_settings_modification=true
#       - elasticsearch.host=https://es01
#       - elasticsearch.username=elastic
#       - elasticsearch.password=${ELASTIC_PASSWORD}
#       - elasticsearch.ssl.enabled=true
#       - elasticsearch.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.enabled=true
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/kibana/kibana.key
#       - xpack.security.http.ssl.certificate=certs/kibana/kibana.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.http.ssl.verification_mode=certificate
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/kibana/kibana.key
#       - xpack.security.transport.ssl.certificate=certs/kibana/kibana.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       # - xpack.security.transport.ssl.verification_mode=certificate
#       # - kibana.external_url=https://kibana:5601
#       - kibana.external_url=https://kibana.${APP_HOST}.${INT_NETWORK}:5601
#     # labels:
#     #  - "traefik.enable=true"
#     #  - "traefik.docker.network=${DOCKER_NETWORK}"
#     #  - "traefik.http.routers.eps-public.rule=Host(`eps.${APP_HOST}.${INT_NETWORK}`)"
#     #  - "traefik.http.routers.eps-public.entrypoints=https"
#     #  - "traefik.http.routers.eps-public.tls=true"
#     #  - "traefik.http.routers.eps-public.middlewares=es01-platypus-${APP_ID}@docker"
#     mem_limit: ${MEM_LIMIT2}
#     healthcheck:
#       # "curl -s --cacert config/certs/ca/ca.crt -I https://localhost:3002 | grep -q 'HTTP/1.1 302 Found'",
#       test:
#         [
#             "CMD-SHELL",
#             "curl -s -I http://localhost:3002 | grep -q 'HTTP/1.1 302 Found'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 500
# 
#   filebeat:
#     depends_on:
#       es01:
#         condition: service_healthy
#     depends_on:
#       kibana:
#         condition: service_healthy
#     image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-file"
#     hostname: "file"
#     networks:
#       # local network:
#       - intnet
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - ./certs:/usr/share/filebeat/certs:ro
#       - ./extras/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
#       - filedata:/usr/share/filebeat/data
#     environment:
#       - elasticsearch.host=https://es01:9200
#       - elasticsearch.username=elastic
#       - elasticsearch.password=${ELASTIC_PASSWORD}
#       - elasticsearch.ssl.enabled=true
#       - elasticsearch.ssl.certificate_authorities=/usr/share/filebeat/certs/ca/ca.crt
 
#   heartbeat:
#     depends_on:
#       es01:
#         condition: service_healthy
#     depends_on:
#       kibana:
#         condition: service_healthy
#     image: docker.elastic.co/beats/heartbeat:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-heart"
#     hostname: "heart"
#     networks:
#       # local network:
#       - intnet
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - ./certs:/usr/share/heartbeat/certs:ro
#       - ./extras/heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro
#       - heartdata:/usr/share/heartbeat/data
#     environment:
#       - elasticsearch.host=https://es01:9200
#       - elasticsearch.username=elastic
#       - elasticsearch.password=${ELASTIC_PASSWORD}
#       - elasticsearch.ssl.enabled=true
#       - elasticsearch.ssl.certificate_authorities=/usr/share/heartbeat/certs/ca/ca.crt
  
#   metricbeat:
#     depends_on:
#       es01:
#         condition: service_healthy
#     depends_on:
#       kibana:
#         condition: service_healthy
#     image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-metric"
#     hostname: "metric"
#     networks:
#       # local network:
#       - intnet
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#       - ./certs:/usr/share/metricbeat/certs:ro
#       - ./extras/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
#       - metricdata:/usr/share/metricbeat/data
#     environment:
#       - elasticsearch.host=https://es01:9200
#       - elasticsearch.username=elastic
#       - elasticsearch.password=${ELASTIC_PASSWORD}
#       - elasticsearch.ssl.enabled=true
#       - elasticsearch.ssl.certificate_authorities=/usr/share/metricbeat/certs/ca/ca.crt
  
#   es02:
#     # Ubuntu - elasticsearch
#     depends_on:
#       es01:
#         condition: service_healthy
#     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#     restart: ${DOCKER_RESTART_POLICY}
#     container_name: "${APP_ID}-es02"
#     hostname: "es02"
#     networks:
#       # for traefik:
#       - default
#       # local network:
#       - intnet
#     # ports:
#     #  - 9201:9200
#     #  - 9301:9301
#     volumes:
#       - ./certs:/usr/share/elasticsearch/config/certs:ro
#       - esdata02:/usr/share/elasticsearch/data
#     environment:
#       - node.name=es02
#       - node.roles=[master, data]
#       - transport.port=9301
#       - http.host=0.0.0.0
#       - cluster.name=${CLUSTER_NAME}
#       - cluster.initial_master_nodes=es01,es02
#       - discovery.seed_hosts=es01:9300
#       - bootstrap.memory_lock=true
#       - xpack.security.enabled=true
#       - xpack.security.http.ssl.enabled=true
#       - xpack.security.http.ssl.key=certs/es02/es02.key
#       - xpack.security.http.ssl.certificate=certs/es02/es02.crt
#       - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
#       - xpack.security.http.ssl.verification_mode=certificate
#       - xpack.security.transport.ssl.enabled=true
#       - xpack.security.transport.ssl.key=certs/es02/es02.key
#       - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
#       - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
#       # - xpack.security.transport.ssl.verification_mode=certificate
#       - xpack.license.self_generated.type=${LICENSE}
#       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
#     labels:
#       - "traefik.enable=true"
#       - "traefik.docker.network=${DOCKER_NETWORK}"
#       - "traefik.http.routers.es02-public.rule=Host(`es02.${APP_HOST}.${INT_NETWORK}`)"
#       - "traefik.http.routers.es02-public.entrypoints=https"
#       - "traefik.http.routers.es02-public.tls=true"
#       - "traefik.http.routers.es02-public.middlewares=es01-platypus-${APP_ID}@docker"
#       - "traefik.http.services.es02-platypus-${APP_ID}.loadbalancer.server.port=9200"
#       - "traefik.http.services.es02-platypus-${APP_ID}.loadbalancer.server.scheme=https"
#     mem_limit: ${MEM_LIMIT}
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#     healthcheck:
#       test:
#         [
#             "CMD-SHELL",
#             "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
#         ]
#       interval: 10s
#       timeout: 10s
#       retries: 500
 
volumes:
  esdata01:
    external: true
    name: "${APP_ID}-es01"
  # esdata02:
  #  external: true
  #  name: "${APP_ID}-es02"
  kibanadata:
    external: true
    name: "${APP_ID}-kibana"
  enterprisesearchdata:
    external: true
    name: "${APP_ID}-eps"
  logstashdata:
    external: true
    name: "${APP_ID}-log"
  fleetdata:
    external: true
    name: "${APP_ID}-fleet"
  apmdata:
    external: true
    name: "${APP_ID}-apm"
  filedata:
    external: true
    name: "${APP_ID}-file"
  heartdata:
    external: true
    name: "${APP_ID}-heart"
  metricdata:
    external: true
    name: "${APP_ID}-metric"
#    
# You can remove this. It's for my prune volume deletion protection ;-)
#
  wordpressbedrockdb:
    external: true
    name: wordpress-bedrock-db
  wordpressdb99:
    external: true
    name: wordpress-db-99
  wordpresspma99:
    external: true
    name: wordpress-pma-99
  wordpressredis99:
    external: true
    name: wordpress-redis-99
  wordpresswp99:
    external: true
    name: wordpress-wp-99
  tomboladb:
    external: true
    name: tombola-db
