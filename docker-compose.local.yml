version: '3.9'

networks:
  default:
    external: true
    name: ${DOCKER_NETWORK}
  intnet:
    external: false
    name: ${INT_NETWORK}

services:
  # Alpine Linux
  weblhs:
    build:
      context: ./context
      dockerfile: Dockerfile 
    image: lhsradek/lhsdock:v3
    # image: nginx:alpine
    container_name: "${APP_ID}"
    hostname: "${APP_HOST}.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    # ports:
    # - 80:80
    # - 443:443
    volumes:
      # - /root/bin/alpine:/root/bin/alpine:ro
      # if http
      - ./extras/nginx/default-http.conf:/etc/nginx/conf.d/default.conf:ro
      # else if https
      # - ./extras/nginx/default-https.conf:/etc/nginx/conf.d/default.conf:ro
      # - ./certs/${CERTNAME}.pem:/etc/ssl/private/cacert.pem:ro
      # - ./certs/${CERTNAME}-key.pem:/etc/ssl/private/cacert-key.pem:ro
      # fi
      - ./application/html:/var/www/html:ro
      - ./logs:/var/log/nginx
      - wordpresswp99:/root/bin/volume/wordpress-wp-99:ro
      - wordpressdb99:/root/bin/volume/wordpress-db-99:ro
      - wordpresspma99:/root/bin/volume/wordpress-pma-99:ro
      - wordpressredis99:/root/bin/volume/wordpress-redis-99:ro
      - tomboladb:/root/bin/volume/tombola-db:ro
    networks:
      - intnet
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.weblhs-public.rule=Host(`${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.weblhs-public.entrypoints=https"
      - "traefik.http.routers.weblhs-public.tls=true"
      # if https
      # - "traefik.http.services.weblhs-platypus-${APP_ID}.loadbalancer.server.scheme=https"
      # - "traefik.http.services.weblhs-platypus-${APP_ID}.loadbalancer.server.port=443"

  weblhs-php:
    # Alpine Linux
    image: php:fpm-alpine
    # image: lhsradek/fpm:v1
    container_name: "${APP_ID}-php"
    hostname: "weblhs-php.${INT_NETWORK}"
    restart: ${DOCKER_RESTART_POLICY}
    volumes:
      # - /root/bin/alpine:/root/bin/alpine:ro
      - ./application/html:/var/www/html:ro
      # - ./context/root/bin/alpine/add.sh:/root/bin/alpine/add2.sh:rw
    networks:
      - intnet

  setup:
    # Ubuntu - elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: "${APP_ID}-setup"
    hostname: "setup"
    restart: "no"
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
      healthcheck:
        test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
        interval: 1s
        timeout: 5s
        retries: 120

  es01:
    # Ubuntu - elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: "${APP_ID}-es01"
    hostname: "es01"
    restart: ${DOCKER_RESTART_POLICY}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:ro
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    environment:
      - node.name=es01
      - transport.host=127.0.0.1
      - http.host=0.0.0.0
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.es01-public.rule=Host(`elasticsearch`, `es01`, `es01.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.es01-public.entrypoints=https"
      - "traefik.http.routers.es01-public.tls=true"
      - "traefik.tcp.routers.es01-tcp.tls.passthrough=true"
      - "traefik.tcp.routers.es01-tcp.service=tcp-service"
      - "traefik.tcp.routers.es01-tcp.tls.certresolver=le"
      - "traefik.tcp.routers.es01-tcp.tls.options=myTLSOptions@file"
      - "traefik.tcp.routers.es01-tcp.rule=HostSNI(`elasticsearch`, `es01`, `es01.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.services.es01-platypus-${APP_ID}.loadbalancer.server.scheme=https"
      - "traefik.http.services.es01-platypus-${APP_ID}.loadbalancer.server.port=9200"
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: "${APP_ID}-kibana"
    hostname: "kibana"
    restart: ${DOCKER_RESTART_POLICY}
    volumes:
      - certs:/usr/share/kibana/config/certs:ro
      - ./extras/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - kibanadata:/usr/share/kibana/data
    # ports:
    #  - ${KIBANA_PORT}:5601
    networks:
      # for traefik:
      - default
      # local network:
      - intnet
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - ENTERPRISESEARCH_HOST=http://enterprisesearch:${ENTERPRISE_SEARCH_PORT}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/kibana/kibana.key
      - xpack.security.http.ssl.certificate=certs/kibana/kibana.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/kibana/kibana.key
      - xpack.security.transport.ssl.certificate=certs/kibana/kibana.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=${DOCKER_NETWORK}"
      - "traefik.http.routers.kibana-public.rule=Host(`kibana.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.routers.kibana-public.entrypoints=https"
      - "traefik.http.routers.kibana-public.tls=true"
      - "traefik.tcp.routers.kibana-tcp.tls.passthrough=true"
      - "traefik.tcp.routers.kibana-tcp.service=tcp-service"
      - "traefik.tcp.routers.kibana-tcp.tls.certresolver=le"
      - "traefik.tcp.routers.kibana-tcp.tls.options=myTLSOptions@file"
      - "traefik.tcp.routers.kibana-tcp.rule=HostSNI(`kibana`, `kibana.${APP_HOST}.${INT_NETWORK}`)"
      - "traefik.http.services.kibana-platypus-${APP_ID}.loadbalancer.server.port=5601"
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  enterprisesearch:
    # Ubuntu - enterprisesearch
    image: docker.elastic.co/enterprise-search/enterprise-search:${STACK_VERSION}
    container_name: "${APP_ID}-eps"
    hostname: "enterprisesearch"
    volumes:
      - certs:/usr/share/enterprise-search/config/certs:ro
      - enterprisesearchdata:/usr/share/enterprise-search/config:ro
    # ports:
    #  - ${ENTERPRISE_SEARCH_PORT}:3002
    networks:
      # local network:
      - intnet
    environment:
      - SERVERNAME=enterprisesearch
      - secret_management.encryption_keys=[${ENCRYPTION_KEYS}]
      - allow_es_settings_modification=true
      - elasticsearch.host=https://es01:9200
      - elasticsearch.username=elastic
      - elasticsearch.password=${ELASTIC_PASSWORD}
      - elasticsearch.ssl.enabled=true
      - elasticsearch.ssl.certificate_authority=/usr/share/enterprise-search/config/certs/ca/ca.crt
      - kibana.external_url=http://kibana:5601
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s -I http://localhost:3002 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  log:
   # Ubuntu - logstash 
   image: logstash:${STACK_VERSION}
   container_name: "${APP_ID}-log"
   hostname: "log"
   restart: ${DOCKER_RESTART_POLICY}
   ports:
     - 5044:5044
   networks:
     # for traefik:
     - default
     # local network:
     - intnet
   volumes:
     - ./extras/logstash/logstash.conf:/etc/logstash/conf.d/logstash.conf:ro
     - certs:/usr/share/logstash/config/certs:ro

volumes:
  certs:
    external: false
    name: "${APP_ID}-certs"
  esdata01:
    external: false
    name: "${APP_ID}-es01"
  kibanadata:
    external: false
    name: "${APP_ID}-kibana"
  enterprisesearchdata:
    external: false
    name: "${APP_ID}-eps"
  wordpressdb99:
    external: true
    name: wordpress-db-99
  wordpresspma99:
    external: true
    name: wordpress-pma-99
  wordpressredis99:
    external: true
    name: wordpress-redis-99
  wordpresswp99:
    external: true
    name: wordpress-wp-99
  tomboladb:
    external: true
    name: tombola-db
