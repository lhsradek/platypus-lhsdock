# ================================ General =====================================
# Beats is configured under Fleet, you can define most settings
# from the Kibana UI. You can update this file to configure the settings that
# are not supported by Fleet.
fleet:
  enabled: true

  kibana:
    hosts: ["https://kibana.${APP_HOST}.${APP_NET}:5601"]
    username: "${ELASTICSEARCH_USERNAME}"
    password: "${ELASTICSEARCH_PASSWORD}"
    ssl:
      enabled: true
      certificate_authorities: ["${ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES}"]
      verification_mode: "${VERIFICATION_MODE}"

monitoring:
  enabled: false
  cluster_uuid: "${CLUSTER_UUID}"

# https://www.elastic.co/guide/en/fleet/current/elastic-agent-monitoring-configuration.html
# agent.monitoring:
#   # enabled turns on monitoring of running processes
#   enabled: true
#   # enables log monitoring
#   logs: true
#   # enables metrics monitoring
#   metrics: true
#   # exposes /debug/pprof/ endpoints for Elastic Agent and Beats
#   # enable these endpoints if the monitoring endpoint is set to localhost
#   pprof.enabled: false
#   # specifies output to be used
#   use_output: monitoring
#   http:
#     # exposes a /buffer endpoint that holds a history of recent metrics
#     buffer.enabled: false

agent.logging.to_stderr: true

# agent.download:
#   # source of the artifacts, requires elastic like structure and naming of the binaries
#   # e.g /windows-x86.zip
#   sourceURI: "https://artifacts.elastic.co/downloads/beats/"
#   # path to the directory containing downloaded packages
#   target_directory: "${path.data}/downloads"
#   # timeout for downloading package
#   timeout: 120s
#   # file path to a public key used for verifying downloaded artifacts
#   # if not file is present Elastic Agent will try to load public key from elastic.co website.
#   pgpfile: "${path.data}/elastic.pgp"
#   # install_path describes the location of installed packages/programs. It is also used
#   # for reading program specifications.
#   install_path: "${path.data}/install"

# agent.process:
#   # minimal port number for spawned processes
#   min_port: 10000
#   # maximum port number for spawned processes
#   max_port: 30000
#   # timeout for creating new processes. when process is not successfully created by this timeout
#   # start operation is considered a failure
#   spawn_timeout: 30s

# agent.retry:
#   # enabled determines whether retry is possible. Default is false.
#   enabled: true
#   # retries_count specifies number of retries. Default is 3.
#   # Retry count of 1 means it will be retried one time after one failure.
#   retries_count: 3
#   # delay specifies delay in ms between retries. Default is 30s
#   delay: 30s
#   # max_delay specifies maximum delay in ms between retries. Default is 300s
#   max_delay: 5m
#   # Exponential determines whether delay is treated as exponential.
#   # With 30s delay and 3 retries: 30, 60, 120s
#   # Default is false
#   exponential: false
#
inputs:
  - type: system/metrics
    data_stream.namespace: default
    use_output: default
    streams:
      - metricset: cpu
        data_stream.dataset: system.cpu
      - metricset: memory
        data_stream.dataset: system.memory
      - metricset: network
        data_stream.dataset: system.network
      - metricset: filesystem
        data_stream.dataset: system.filesystem

outputs:
  default:
    type: elasticsearch
    hosts:
      - "https://es01.${APP_HOST}.${APP_NET}:9200"
    # api_key: "${AGENT_API_KEY}"
    username: "${FLEET_SERVER_ELASTICSEARCH_USERNAME}"
    password: "${FLEET_SERVER_ELASTICSEARCH_PASSWORD}"
    ssl:
      enabled: true
      certificate_authorities:
        - "${ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES}"
      # certificate: "${FLEET_SERVER_CERT}"
      # key: "${FLEET_SERVER_CERT_KEY}"
      verification_mode: "${VERIFICATION_MODE}"
