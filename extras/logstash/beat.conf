# https://www.elastic.co/guide/en/logstash/current/plugins-inputs-beats.html
input {
  beats {
    port => 5045
    ssl => true
    ssl_certificate_authorities => ["${ELASTIC_SSL_CERTIFICATEAUTHORITY}"]
    ssl_certificate => "/usr/share/logstash/config/certs/logstash.crt"
    ssl_key => "/usr/share/logstash/config/certs/logstash.key"
    ssl_verify_mode => "force_peer"
  }
}

filter {
  if [service][type] == "traefik" and [fileset][name] == "access" {
    json { source => "message" }
    date {
      match => ["time", "ISO8601"]
      timezone => "UTC"
      target => "time"
    }
    ruby { code =>'event.set("time", Time.at(event.get("time").to_f).strftime("%Y-%m-%d %H:%M"))' }
    if [RouterName] =~ /.+/ {
      mutate { replace => { "message" => "%{[app][id]} %{time} [%{DownstreamStatus}] %{ClientHost} - %{RouterName}: %{RequestMethod} %{RequestPath}" }
      }
    } else {
      mutate { replace => { "message" => "%{[app][id]} %{time} [%{DownstreamStatus}] %{ClientHost} - %{RequestAddr}: %{RequestMethod} %{RequestPath}" }
      }
    }
    mutate { remove_field => ["time", "msg"] }
  } else if [service][type] == "nginx" {
    mutate { replace => { "message" => "%{[app][id]} %{[message]}" } }
  } else if [service][type] == "kibana" {
# https://github.com/elastic/logstash/blob/v1.4.0/patterns/grok-patterns    
    grok { match => { "message" => "^%{TIMESTAMP_ISO8601:time} \[%{LOGLEVEL:level}%{SPACE}\]\[%{DATA:logger}\] (?m)%{GREEDYDATA:msg}$" } }
# remove milisec. for ruby from time:
    date {
      match => ["time", "ISO8601"]
      timezone => "UTC"
      target => "time"
    }
    if "_grokparsefailure" in [tags] {
      drop { }
    } else {
      ruby { code =>'event.set("time", Time.at(event.get("time").to_f).strftime("%Y-%m-%d %H:%M"))' }
      mutate { replace => { "message" => "%{[app][id]} %{time} [%{level}][%{logger}] %{msg}" } }
      mutate { lowercase => [ "level" ] }
    }
    mutate {
      add_field => {
        "[event][kind]" => "event"
        "[event][category]" => "log"
      }
      remove_field => ["msg", "time"]
    }
  } else if [service][type] == "elasticsearch" and [fileset][name] == "gc" {
# https://github.com/elastic/logstash/blob/v1.4.0/patterns/grok-patterns    
    grok { match => { "message" => "\[%{TIMESTAMP_ISO8601:time}\]\[%{NUMBER:num}\]\[%{DATA:gc}%{SPACE}\] %{GREEDYDATA:msg}" } }
# remove milisec. for ruby from time:
    date {
      match => ["time", "ISO8601"]
      timezone => "UTC"
      target => "time"
    }
    ruby { code =>'event.set("time", Time.at(event.get("time").to_f).strftime("%Y-%m-%d %H:%M"))' }
    mutate { replace => { "message" => "%{[app][id]} %{time} [%{num}][%{gc}] %{msg}" } }
    mutate {
      add_field => {
        "[event][kind]" => "event"
        "[event][category]" => "log"
      }
      remove_field => ["time", "msg"]
    }
  } else if [log][file][path] =~ /traefik/ {
    kv { remove_char_value => "\"" }
    date {
      match => ["time", "ISO8601"]
      timezone => "UTC"
      target => "time"
    }
    ruby { code =>'event.set("time", Time.at(event.get("time").to_f).strftime("%Y-%m-%d %H:%M"))' }
    mutate { gsub => [ "msg", "\\n", " " ] }
    mutate { uppercase => [ "level" ] }
    mutate { replace => { "message" => "%{[app][id]} %{time} [%{level}] %{msg}" } }
    mutate { lowercase => [ "level" ] }
    mutate {
      add_field => {
        "[event][kind]" => "event"
        "[event][category]" => "log"
      }
      remove_field => ["time", "msg"]
    }
    if [event][dataset] !~ /.+/ {
      mutate { add_field => { "[event][dataset]" => "traefik.error" } }
    }
  }
}

# https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html
output {
  elasticsearch {
    hosts => ["https://es01.${APP_HOST}.${APP_NET}:9200"]
# data stream is enabled by default
#     data_stream => true
    ssl => true
    cacert => ["${ELASTIC_SSL_CERTIFICATEAUTHORITY}"]
    user => "${LOGSTASH_USERNAME}"
    password => "${LOGSTASH_PASSWORD}"
  }
}
