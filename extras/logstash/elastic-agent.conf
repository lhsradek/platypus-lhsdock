# https://www.elastic.co/guide/en/logstash/current/plugins-inputs-elastic_agent.html
input {
  elastic_agent {
    port => 5044
    ssl => true
    ssl_certificate_authorities => ["${ELASTIC_SSL_CERTIFICATEAUTHORITY}"]
    ssl_certificate => "/usr/share/logstash/config/certs/logstash.crt"
    ssl_key => "/usr/share/logstash/config/certs/logstash.key"
    ssl_verify_mode => "force_peer"
  }
}

filter {
  if [input][type] == "filestream" {
    if [log][file][path] == "${TRAEFIK_AGENT_LOG}" {
      kv {
        remove_char_value => "\""
      }
      date {
        match => ["time", "ISO8601"]
        timezone => "UTC"
        target => "@timestamp"
      }
      ruby {
        code =>'event.set("time", Time.at(event.get("@timestamp").to_f).strftime("%Y-%m-%d %H:%M"))'
      }
      mutate { gsub => [ "msg", "\\n", " " ] }
      mutate { uppercase => [ "level" ] }
      mutate {
        replace => { "message" => "%{[app][id]} %{time} [%{level}] %{msg}" }
      }
      mutate { lowercase => [ "level" ] }
      mutate {
        add_field => {
          "[event][kind]" => "event"
          "[event][category]" => "log"
          "[event][dataset]" => "traefik.error"
        }
        remove_field => ["time", "msg"]
      }
    } else if [log][file][path] == "${KIBANA_AGENT_LOG}" {
      mutate {
        add_field => {
          "[event][kind]" => "event"
          "[event][category]" => "log"
          "[event][dataset]" => "kibana.log"
        }
        replace => { "message" => "%{[app][id]} %{[message]}" }
      }
    }
  } else if [service][type] == "traefik" {
    if [fileset][name] == "access" {
      json {
        source => "message"
      }
      date {
        match => ["time", "ISO8601"]
        timezone => "UTC"
        target => "@timestamp"
      }
    }
    mutate {
      replace => { "message" => "%{[app][id]} %{[message]}" }
    }
  } else if [service][type] == "nginx" {
    mutate {
      replace => { "message" => "%{[app][id]} %{[message]}" }
    }
  } else if [service][type] == "elasticksearch" {
    mutate {
      replace => { "message" => "%{[app][id]} %{[message]}" }
    }
  }
  mutate {
    add_field => {
      "[ecs][version]" => "${STACK_VERSION}"
    }
  }
}

# https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html
# for ingest pipeline see  https://www.elastic.co/guide/en/logstash/current/use-ingest-pipelines.html
output {
  elasticsearch {
    hosts => ["https://es01.${APP_HOST}.${APP_NET}:9200"]
    ssl => true
    data_stream => "true"
    cacert => ["${ELASTIC_SSL_CERTIFICATEAUTHORITY}"]
    user => "${LOGSTASH_USERNAME}"
    password => "${LOGSTASH_PASSWORD}"
  }
}
